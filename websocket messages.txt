STUFF THAT IS SENT VIA WEBSOCKET

AbstractMethod
- (partial) agent message in EVERY iteration of the chunk-loop
  - with "content" being the last text chunk only
  - with partial tool-calls (no results yet)
- after the loop, agent message is sent AGAIN, this time without ANY content, mainly for the meta infos
- the ACTUAL, full, complete AgentMessage is NEVER sent via websocket, just parts!
- container-login-request

Simple
- agent message (not generated by LLM) with tool-call result

Simple-Tools
- nothing (does NOT send tool-call results in any way)

Tool-LLM
- agent-message returned by abstract-method with added tool-call-results

Orchestrated
- has a special send-to-websocket method that can either send actual agent-messages or pseudo-agent-messages composed of only agent and message
- worker-msg (incl tool results), planner-message, evaluator-message, etc.
- status "planning", "executing", "evaluating", etc.
- some messages that just make no sense/are redundant
- specially formatted message for orchestrator output (instead of JSON)
- execution-time-breakdown per agent
- errors (as agent message with "system" agent)


GENERAL OBSERVATIONS

- in most (all?) cases, the agent-message is used as a vehicle to transport other messages or just part of its own attributes
- there is a mechanism in the frontend for adding "status messages" to the chat bubble, but the orchestration method sends separate websocket messages for those
- there is no uniform way to send the tool-call-result

SUGGESTIONS

- create message classes for tool-calls, text-chunks, tool-call-results, metrics, status-messages, errors, etc. and use those instead of (partial) agent messages
- unify status-message sending between methods
- unify tool-call-result sending between methods (probably in invoke-tool)
- never send the actual agent-message or query-response
- add "statusmessage" attribute to call-llm and send to websocket there?
