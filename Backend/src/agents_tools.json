{
  "agents_simple": {
    "bobbi-agent": {
      "functions": [
        "AskKnowledgeLLM"
      ],
      "summary": "This agent specializes in assisting with inquiries related to Berlin's administration, local events, attractions, document searches, and appointment bookings. It forwards user questions to a language model optimized for these topics, requiring all necessary details to be included in the query for accurate responses. It is ideal for users seeking administrative support, event information, or help navigating Berlin-specific resources."
    },
    "data-agent": {
      "functions": [
        "AskDataAnalysisLLMForHistoricData",
        "AskDataAnalysisLLMForForecastData",
        "AskDataAnalysisModelForForecastData"
      ],
      "summary": "DO NOT USE THIS AGENT! This agent and its functions are not working properly!"
    },
    "information-agent": {
      "functions": [
        "GetStockPrices",
        "SummarizeWikipedia",
        "SummarizeWebsite",
        "SearchGoogle",
        "GetWeatherForecast"
      ],
      "summary": "This agent is designed to retrieve, summarize, and present information from various sources. It can fetch stock prices using the Yahoo Finance API, summarize Wikipedia articles, websites, or Google search results using GPT, and provide weather forecasts for specific locations and timeframes. It is best used for quickly gathering and condensing information on financial data, general knowledge, web content, search engine results, and weather updates."
    },
    "shelf-agent": {
      "functions": [
        "FindInShelf",
        "OpenShelf",
        "CloseShelf"
      ],
      "summary": "This agent is designed to locate, access, and manage shelves containing specific items. It identifies the appropriate shelf for a given item using its ID, then facilitates interaction by opening or closing the shelf, provided the shelf is visible. It is specifically used for tasks involving the retrieval or organization of items within a shelving system."
    },
    "desk-agent": {
      "functions": [
        "GetHeight",
        "SetHeight",
        "SetOccupied",
        "SetLight"
      ],
      "summary": "This agent is designed to manage and customize a smart desk's functionality, including its height, occupancy state, and ambient lighting. It allows precise control over the desk's height in centimeters, toggles its occupied status, and adjusts the ambient light's state and RGB color values. It is ideal for automating or personalizing desk settings to enhance comfort, usability, and aesthetics."
    },
    "home-assistant-agent": {
      "functions": [
        "GetSensorsList",
        "GetSensorId",
        "GetTemperature",
        "GetCo2",
        "GetValue"
      ],
      "summary": "This agent is designed to monitor and retrieve environmental data from multisensors in a home setting. It can identify available multisensors, locate a specific sensor by room, and retrieve specific measurements such as temperature, CO2 levels, or other properties based on sensor ID and key. It is ideal for tasks involving real-time environmental monitoring or data collection for specific rooms or sensors."
    },
    "DataVisAgent": {
      "functions": [
        "MakeLinePlot",
        "MakeScatterPlot",
        "MakeBarPlot",
        "MakeHistogram",
        "MakePieChart",
        "GetLiveEnergyData"
      ],
      "summary": "This agent specializes in creating a variety of data visualizations, including line plots, scatter plots, bar plots, histograms, and pie charts, with customizable parameters such as axis labels, titles, colors, and data formatting (e.g., numeric, date, datetime, or string). It also provides an embeddable iframe for live energy mix data visualization from Electricity Maps, allowing users to view energy and emissions data for specific countries and timeframes. The agent is ideal for generating clear, customizable visual representations of data and embedding live energy dashboards. IT CAN VISUALIZE LIVE AND HISTORICAL ENERGY DATA WITHOUT THE NEED FOR ANY PRIOR DATA RETRIEVAL!"
    },
    "exchange-agent": {
      "functions": [
        "FindEmailAddress",
        "FindPhoneNumber",
        "WriteEmail",
        "MakeAppointment",
        "MakeAppointmentToday",
        "MakeAppointmentTomorrow",
        "FindFreeHours",
        "FindFreeHoursToday",
        "FindFreeHoursTomorrow",
        "GetEmails",
        "FindPersons",
        "GetMyUpcomingAppointments",
        "GetUpcomingAppointments"
      ],
      "summary": "This agent is designed to manage communication and scheduling tasks efficiently. It can retrieve contact information (email addresses and phone numbers), send or forward emails, and schedule appointments, including finding mutually available time slots for specified users. Additionally, it can search for specific individuals based on keywords, retrieve recent emails, and provide details on upcoming appointments for the user or others, making it ideal for streamlining professional coordination and communication."
    },
    "servlet-agent": {
      "functions": [
        "ShowMessage",
        "GetValue",
        "SetTitle",
        "SetValue"
      ],
      "summary": "This agent is designed for managing and interacting with key-value data and user interface elements. It can retrieve and store key-value pairs, display messages to users for a specified duration, and update the title of an interface. It is best used for applications requiring dynamic data handling and user notifications within a controlled environment."
    }
  },
  "agents_detailed": [
    {
      "type": "function",
      "function": {
        "name": "bobbi-agent--AskKnowledgeLLM",
        "description": "This Action forwards the given question to another language model that can help with answering questions about Berlin's administration, providing information about local events and attractions, assisting with the search for relevant documents and forms, and booking appointments with the Berlin administration. Make sure to provide all necessary information directly in the question, so the language model can answer it in the best way possible.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "question"
              ],
              "type": "object",
              "properties": {
                "question": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "data-agent--AskDataAnalysisLLMForHistoricData",
        "description": "This Action forwards the given question to another language model that has access to historic time series data on different topics, such as carbon monoxide in some areas of Berlin, traffic accidents, Covid-19 case numbers, as well as historic data on temperatures and noise levels in different rooms of the ZEKI real laboratory (kitchen, experience hub, conference room and coworking space). User questions are translated to appropriate DB queries and the result is returned, which may be a single number, or a list or dictionary of numbers for more complex requests, or the URL to an image, generated and hosted by the service. Make sure to provide all necessary information directly in the question, so the language model can answer it in the best way possible.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "question"
              ],
              "type": "object",
              "properties": {
                "question": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "data-agent--AskDataAnalysisLLMForForecastData",
        "description": "This action can create predictions for different data, especially on temperatures and noise levels in the rooms of the ZEKI real laboratory (kitchen, experience hub, conference room and coworking space). The given query is analysed by an LLM to extract the 'what', 'where' and 'when', which is then used to create an appropriate ML model for the request. The result usually contains two parts: numerical data, and a link to a visualisation of the data.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "question"
              ],
              "type": "object",
              "properties": {
                "question": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "data-agent--AskDataAnalysisModelForForecastData",
        "description": "This action can create predictions for different data, especially on temperatures and noise levels in the rooms of the ZEKI real laboratory (kitchen, experience hub, conference room and coworking space). The 'what', 'where' and 'when' is used to create an appropriate ML model for the request. The result usually contains two parts: numerical data, and a link to a visualisation of the data.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "what",
                "when",
                "where"
              ],
              "type": "object",
              "properties": {
                "what": {
                  "type": "string"
                },
                "where": {
                  "type": "string"
                },
                "when": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "information-agent--GetStockPrices",
        "description": "Find values on the stock market, using the Yahoo Finance API. Query is used to search for a stock, e.g. 'Apple'.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "query"
              ],
              "type": "object",
              "properties": {
                "query": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "information-agent--SummarizeWikipedia",
        "description": "Find an article on Wikipedia and summarize the page with GPT.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "query"
              ],
              "type": "object",
              "properties": {
                "query": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "information-agent--SummarizeWebsite",
        "description": "Open a specific website and summarize the page with GPT, either in general or w.r.t. a specific question.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "url"
              ],
              "type": "object",
              "properties": {
                "url": {
                  "type": "string"
                },
                "query": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "information-agent--SearchGoogle",
        "description": "Search for something on Google, try the first few pages and summarize the results with GPT.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "num_results",
                "query"
              ],
              "type": "object",
              "properties": {
                "query": {
                  "type": "string"
                },
                "num_results": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "information-agent--GetWeatherForecast",
        "description": "Get weather forecasts for a given city name for the given amount of days in advance.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "daysAhead",
                "locationName"
              ],
              "type": "object",
              "properties": {
                "locationName": {
                  "type": "string"
                },
                "daysAhead": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "shelf-agent--FindInShelf",
        "description": "Find the ID of the shelf that should contain the given item, or -1 if no such shelf exists.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "item"
              ],
              "type": "object",
              "properties": {
                "item": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "shelf-agent--OpenShelf",
        "description": "Open the shelf with the given ID. Only use this action when you can see the shelf!",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "shelf"
              ],
              "type": "object",
              "properties": {
                "shelf": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "shelf-agent--CloseShelf",
        "description": "Close the shelf with the given ID. Only use this action when you can see the shelf!",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "shelf"
              ],
              "type": "object",
              "properties": {
                "shelf": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "desk-agent--GetHeight",
        "description": "Get the current height of the desk, in centimeters",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "type": "object"
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "desk-agent--SetHeight",
        "description": "Set the height of the desk, in centimeters",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "height"
              ],
              "type": "object",
              "properties": {
                "height": {
                  "type": "number"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "desk-agent--SetOccupied",
        "description": "Set the desk's current occupied state.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "state"
              ],
              "type": "object",
              "properties": {
                "state": {
                  "type": "boolean"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "desk-agent--SetLight",
        "description": "Set the state and color of the desk's ambient light. RGB color values are from 0 to 255.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "blue",
                "green",
                "red",
                "state"
              ],
              "type": "object",
              "properties": {
                "state": {
                  "type": "boolean"
                },
                "red": {
                  "type": "integer",
                  "format": "int32"
                },
                "green": {
                  "type": "integer",
                  "format": "int32"
                },
                "blue": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "home-assistant-agent--GetSensorsList",
        "description": "Get list of all devices with 'multisensor' in their name. Those include the different sub-sensors of the multisensors, each including the main sensor's ID in their name as well as what they measure.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "type": "object"
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "home-assistant-agent--GetSensorId",
        "description": "Get sensor ID corresponding to a given room. Room name does not have to be a perfect match.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "room"
              ],
              "type": "object",
              "properties": {
                "room": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "home-assistant-agent--GetTemperature",
        "description": "Get temperature value for a given sensor",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "sensorId"
              ],
              "type": "object",
              "properties": {
                "sensorId": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "home-assistant-agent--GetCo2",
        "description": "Get Co2 value for a given sensor",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "sensorId"
              ],
              "type": "object",
              "properties": {
                "sensorId": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "home-assistant-agent--GetValue",
        "description": "Get the value for a given sensor and property, searching in the list of sensors for a match",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "key",
                "sensorId"
              ],
              "type": "object",
              "properties": {
                "sensorId": {
                  "type": "string"
                },
                "key": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "DataVisAgent--MakeLinePlot",
        "description": "Make a line plot of the provided data.\nSupports automatic conversion to different x-axis value types (string, numeric, date, datetime).\nThe x value parameter is expected to be a list of strings which is then converted to the specified x_value_type.\n\nParameters:\n- x: List of strings representing the x-axis values\n- y: List of numbers representing the y-axis values\n- format: Line format string (optional, available options: '-', '--', '-.', ':' , default: '-')\n- x_label: Label for x-axis (optional)\n- y_label: Label for y-axis (optional)\n- title: Title of the plot (optional)\n- line_width: Width of the line (optional)\n- color: Color of the line (optional, accepts standard color names or hex codes)\n- x_value_type: How to interpret x-axis values (optional, default: 'numeric'). Options:\n    * 'numeric': Convert to numbers (default)\n    * 'date': Convert to dates (format: \"%Y-%m-%d\" example:\"2025-02-16\")\n    * 'datetime': Convert to datetime (format: \"%Y-%m-%d %H:%M:%S\" example:\"2025-02-16 18:23:12\")\n    * 'string': T",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "x",
                "y"
              ],
              "type": "object",
              "properties": {
                "x": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "y": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                },
                "format": {
                  "type": "string"
                },
                "x_label": {
                  "type": "string"
                },
                "y_label": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "line_width": {
                  "type": "number"
                },
                "color": {
                  "type": "string"
                },
                "x_value_type": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "DataVisAgent--MakeScatterPlot",
        "description": "Make a scatter plot of the provided data.\nSupports automatic conversion to different x-axis value types (string, numeric, date, datetime).\nThe x value parameter is expected to be a list of strings which is then converted to the specified x_value_type.\n\nParameters:\n- x: List of strings representing the x-axis values\n- y: List of numbers representing the y-axis values\n- x_label: Label for x-axis (optional)\n- y_label: Label for y-axis (optional)\n- title: Title of the plot (optional)\n- size: Size of the scatter points (optional, default is 20)\n- color: Color of the points (optional, accepts standard color names or hex codes)\n- x_value_type: How to interpret x-axis values (optional, default: 'numeric'). Options:\n    * 'numeric': Convert to numbers (default)\n    * 'date': Convert to dates (format: \"%Y-%m-%d\" example:\"2025-02-16\")\n    * 'datetime': Convert to datetime (format: \"%Y-%m-%d %H:%M:%S\" example:\"2025-02-16 18:23:12\")\n    * 'string': Treat as plain text\n",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "x",
                "y"
              ],
              "type": "object",
              "properties": {
                "x": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "y": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                },
                "x_label": {
                  "type": "string"
                },
                "y_label": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "size": {
                  "type": "number"
                },
                "color": {
                  "type": "string"
                },
                "x_value_type": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "DataVisAgent--MakeBarPlot",
        "description": "Make a bar plot of the provided data. \nSupports automatic conversion to different x-axis value types (string, numeric, date, datetime).\nThe x value parameter is expected to be a list of strings which is then converted to the specified x_value_type.\n            \nParameters:\n- x: List of strings representing the x-axis categories/labels\n- y: List of numbers representing the height of each bar\n- x_label: Label for x-axis (optional)\n- y_label: Label for y-axis (optional)\n- title: Title of the plot (optional)\n- width: Width of the bars, between 0 and 1 (optional, default: 0.8)\n- color: Color of the bars (optional, accepts standard color names or hex codes)\n- x_value_type: How to interpret x-axis values (optional, default: 'string'). Options:\n    * 'string': Treat as plain text (default)\n    * 'numeric': Convert to numbers if possible\n    * 'date': Convert to dates (format: \"%Y-%m-%d\" example:\"2025-02-16\")\n    * 'datetime': Convert to datetime (format: \"%Y-%m-%d %H:%M:%S\" example:\"2025-02-16 18:23:12\")\n    \nAny con",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "x",
                "y"
              ],
              "type": "object",
              "properties": {
                "x": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "y": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                },
                "x_label": {
                  "type": "string"
                },
                "y_label": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "width": {
                  "type": "number"
                },
                "color": {
                  "type": "string"
                },
                "x_value_type": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "DataVisAgent--MakeHistogram",
        "description": "Create a histogram of the provided data.\nA histogram represents the distribution of numerical data by splitting it into bins.\n\nParameters:\n- x: List of numbers to create histogram from\n- bins: Number of bars/bins to group the data into (optional, default: 10)\n- x_label: Label for x-axis (optional, default: 'Values')\n- y_label: Label for y-axis (optional, default: 'Frequency')\n- title: Title of the plot (optional)\n- color: Color of the bars (optional, accepts standard color names or hex codes)\n\nThe histogram will automatically calculate the frequency of values falling into each bin.\n",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "x"
              ],
              "type": "object",
              "properties": {
                "x": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                },
                "bins": {
                  "type": "integer",
                  "format": "int32"
                },
                "x_label": {
                  "type": "string"
                },
                "y_label": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "color": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "DataVisAgent--MakePieChart",
        "description": "Create a pie chart with the provided data.\nA pie chart shows the relative proportions of different categories as slices of a circle.\n\nParameters:\n- labels: List of strings representing the category names\n- values: List of numbers representing the size of each category\n- title: Title of the plot (optional)\n- colors: List of colors for each slice (optional, accepts standard color names or hex codes)\n\nThe values will be automatically converted to percentages of the total.\nEach slice will be labeled with its category name and percentage.\n",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "labels",
                "values"
              ],
              "type": "object",
              "properties": {
                "labels": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "values": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                },
                "title": {
                  "type": "string"
                },
                "colors": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "DataVisAgent--GetLiveEnergyData",
        "description": "Get an embeddable iframe for the live energy mix dashboard of Electricity Maps.\nIf you want to visualize the energy mix and the emissions of the energy in any way, USE THIS FUNCTION!\n\nParameters:\n- country_code: Two-letter country code (optional, default: 'DE' for Germany)\n- height: Height of the iframe in pixels (optional, default: 700)\n- timeframe: Time period to display (optional, default: '72h'). Options:\n    * '72h': Last 72 hours with hourly data\n    * '3mo': Last 3 months with daily data\n    * '12mo': Last 12 months with monthly data\n    * 'all': All time view with monthly data\n\nThe iframe will show electricity data for the specified country and time period.\nThe iframe can be embedded directly in HTML content.\nIF THE TASK DOES NOT SPECIFY A COUNTRY, TIMEFRAME OR HEIGHT, DON'T USE ANY OF THESE PARAMETERS AND LEAVE THEM AT THEIR DEFAULT VALUES!\n",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "type": "object",
              "properties": {
                "country_code": {
                  "type": "string"
                },
                "height": {
                  "type": "number"
                },
                "timeframe": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "exchange-agent--FindEmailAddress",
        "description": "Find the email address for a specific user.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "nameQuery"
              ],
              "type": "object",
              "properties": {
                "nameQuery": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "exchange-agent--FindPhoneNumber",
        "description": "Find the phone number of a specific user.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "nameQuery"
              ],
              "type": "object",
              "properties": {
                "nameQuery": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "exchange-agent--WriteEmail",
        "description": "Write or forward an email with the provided subject as a title and the provided message as the email content to the given recipients.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "message",
                "recipientEmails",
                "subject"
              ],
              "type": "object",
              "properties": {
                "subject": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "recipientEmails": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "exchange-agent--MakeAppointment",
        "description": "Make a new appointment with the given list of attendees on a given date (e.g. \"today\", \"tomorrow\", \"2024-08-01\", ...)",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "attendeeEmails",
                "date",
                "durationHours",
                "startTimeHours",
                "subject"
              ],
              "type": "object",
              "properties": {
                "subject": {
                  "type": "string"
                },
                "attendeeEmails": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "startTimeHours": {
                  "type": "integer",
                  "format": "int32"
                },
                "durationHours": {
                  "type": "integer",
                  "format": "int32"
                },
                "date": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "exchange-agent--MakeAppointmentToday",
        "description": "Make a new appointment with the given list of attendees for today.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "attendeeEmails",
                "durationHours",
                "startTimeHours",
                "subject"
              ],
              "type": "object",
              "properties": {
                "subject": {
                  "type": "string"
                },
                "attendeeEmails": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "startTimeHours": {
                  "type": "integer",
                  "format": "int32"
                },
                "durationHours": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "exchange-agent--MakeAppointmentTomorrow",
        "description": "Make a new appointment with the given list of attendees for tomorrow.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "attendeeEmails",
                "durationHours",
                "startTimeHours",
                "subject"
              ],
              "type": "object",
              "properties": {
                "subject": {
                  "type": "string"
                },
                "attendeeEmails": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "startTimeHours": {
                  "type": "integer",
                  "format": "int32"
                },
                "durationHours": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "exchange-agent--FindFreeHours",
        "description": "Find all full 1-hour slots where all given users have time on a given date (e.g. \"today\", \"tomorrow\", \"2024-08-01\", ...)",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "date",
                "userEmails"
              ],
              "type": "object",
              "properties": {
                "userEmails": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "date": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "exchange-agent--FindFreeHoursToday",
        "description": "Find all full 1-hour slots where all given users have time today.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "userEmails"
              ],
              "type": "object",
              "properties": {
                "userEmails": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "exchange-agent--FindFreeHoursTomorrow",
        "description": "Find all full 1-hour slots where all given users have time tomorrow.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "userEmails"
              ],
              "type": "object",
              "properties": {
                "userEmails": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "exchange-agent--GetEmails",
        "description": "Get the last x received emails. Result can be filtered down by providing a search query which must appear in the mail.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "numEmails"
              ],
              "type": "object",
              "properties": {
                "numEmails": {
                  "type": "integer",
                  "format": "int32"
                },
                "searchQuery": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "exchange-agent--FindPersons",
        "description": "Find persons matching the given keywords/queries (e.g. 'beintelli', 'goki', 'phd', 'hiring', etc.). Returns all persons that are associated with all the provided keywords.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "keywords"
              ],
              "type": "object",
              "properties": {
                "keywords": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "exchange-agent--GetMyUpcomingAppointments",
        "description": "Get a list of my own upcoming appointments.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "numDays"
              ],
              "type": "object",
              "properties": {
                "numDays": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "exchange-agent--GetUpcomingAppointments",
        "description": "Get a list of upcoming appointments for the given users.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "numDays",
                "userEmails"
              ],
              "type": "object",
              "properties": {
                "userEmails": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "numDays": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "servlet-agent--ShowMessage",
        "description": "",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "message"
              ],
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                },
                "seconds": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "servlet-agent--GetValue",
        "description": "",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "key"
              ],
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "servlet-agent--SetTitle",
        "description": "",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "title"
              ],
              "type": "object",
              "properties": {
                "title": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "servlet-agent--SetValue",
        "description": "",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "key",
                "value"
              ],
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    }
  ]
}