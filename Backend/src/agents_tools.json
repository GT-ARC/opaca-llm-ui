{
  "agents_simple": {
    "DataVisAgent": {
      "functions": [
        {
          "name": "MakeLinePlot",
          "description": "Make a line plot of the provided data.\nSupports automatic conversion to different x-axis value types (string, numeric, date, datetime).\nThe x value parameter is expected to be a list of strings which is then converted to the specified x_value_type.\n\nParameters:\n- x: List of strings representing the x-axis values\n- y: List of numbers representing the y-axis values\n- format: Line format string (optional, available options: '-', '--', '-.', ':' , default: '-')\n- x_label: Label for x-axis (optional)\n- y_label: Label for y-axis (optional)\n- title: Title of the plot (optional)\n- line_width: Width of the line (optional)\n- color: Color of the line (optional, accepts standard color names or hex codes)\n- x_value_type: How to interpret x-axis values (optional, default: 'string'). Options:\n    * 'numeric': Convert to numbers \n    * 'date': Convert to dates (format: \"%Y-%m-%d\" example:\"2025-02-16\")\n    * 'datetime': Convert to datetime (format: \"%Y-%m-%d %H:%M:%S\" example:\"2025-02-16 18:23:12\")\n    * 'string': Treat as plain text (default)\n    \nAny conversion failures will fallback to string representation.\n            ",
          "parameters": {
            "x": {
              "type": "array",
              "required": true,
              "items": {
                "type": "string"
              }
            },
            "y": {
              "type": "array",
              "required": true,
              "items": {
                "type": "number"
              }
            },
            "format": {
              "type": "string",
              "required": false
            },
            "x_label": {
              "type": "string",
              "required": false
            },
            "y_label": {
              "type": "string",
              "required": false
            },
            "title": {
              "type": "string",
              "required": false
            },
            "line_width": {
              "type": "number",
              "required": false
            },
            "color": {
              "type": "string",
              "required": false
            },
            "x_value_type": {
              "type": "string",
              "required": false
            }
          },
          "result": {
            "type": "string",
            "required": true
          }
        },
        {
          "name": "MakeScatterPlot",
          "description": "Make a scatter plot of the provided data.\nSupports automatic conversion to different x-axis value types (string, numeric, date, datetime).\nThe x value parameter is expected to be a list of strings which is then converted to the specified x_value_type.\n\nParameters:\n- x: List of strings representing the x-axis values\n- y: List of numbers representing the y-axis values\n- x_label: Label for x-axis (optional)\n- y_label: Label for y-axis (optional)\n- title: Title of the plot (optional)\n- size: Size of the scatter points (optional, default is 20)\n- color: Color of the points (optional, accepts standard color names or hex codes)\n- x_value_type: How to interpret x-axis values (optional, default: 'string'). Options:\n    * 'numeric': Convert to numbers\n    * 'date': Convert to dates (format: \"%Y-%m-%d\" example:\"2025-02-16\")\n    * 'datetime': Convert to datetime (format: \"%Y-%m-%d %H:%M:%S\" example:\"2025-02-16 18:23:12\")\n    * 'string': Treat as plain text (default)\n",
          "parameters": {
            "x": {
              "type": "array",
              "required": true,
              "items": {
                "type": "string"
              }
            },
            "y": {
              "type": "array",
              "required": true,
              "items": {
                "type": "number"
              }
            },
            "x_label": {
              "type": "string",
              "required": false
            },
            "y_label": {
              "type": "string",
              "required": false
            },
            "title": {
              "type": "string",
              "required": false
            },
            "size": {
              "type": "number",
              "required": false
            },
            "color": {
              "type": "string",
              "required": false
            },
            "x_value_type": {
              "type": "string",
              "required": false
            }
          },
          "result": {
            "type": "string",
            "required": true
          }
        },
        {
          "name": "MakeBarPlot",
          "description": "Make a bar plot of the provided data. \nSupports automatic conversion to different x-axis value types (string, numeric, date, datetime).\nThe x value parameter is expected to be a list of strings which is then converted to the specified x_value_type.\n            \nParameters:\n- x: List of strings representing the x-axis categories/labels\n- y: List of numbers representing the height of each bar\n- x_label: Label for x-axis (optional)\n- y_label: Label for y-axis (optional)\n- title: Title of the plot (optional)\n- width: Width of the bars, between 0 and 1 (optional, default: 0.8)\n- color: Color of the bars (optional, accepts standard color names or hex codes)\n- x_value_type: How to interpret x-axis values (optional, default: 'string'). Options:\n    * 'string': Treat as plain text (default)\n    * 'numeric': Convert to numbers if possible\n    * 'date': Convert to dates (format: \"%Y-%m-%d\" example:\"2025-02-16\")\n    * 'datetime': Convert to datetime (format: \"%Y-%m-%d %H:%M:%S\" example:\"2025-02-16 18:23:12\")\n    \nAny conversion failures will fallback to string representation.\n            ",
          "parameters": {
            "x": {
              "type": "array",
              "required": true,
              "items": {
                "type": "string"
              }
            },
            "y": {
              "type": "array",
              "required": true,
              "items": {
                "type": "number"
              }
            },
            "x_label": {
              "type": "string",
              "required": false
            },
            "y_label": {
              "type": "string",
              "required": false
            },
            "title": {
              "type": "string",
              "required": false
            },
            "width": {
              "type": "number",
              "required": false
            },
            "color": {
              "type": "string",
              "required": false
            },
            "x_value_type": {
              "type": "string",
              "required": false
            }
          },
          "result": {
            "type": "string",
            "required": true
          }
        },
        {
          "name": "MakeHistogram",
          "description": "Create a histogram of the provided data.\nA histogram represents the distribution of numerical data by splitting it into bins.\n\nParameters:\n- x: List of numbers to create histogram from\n- bins: Number of bars/bins to group the data into (optional, default: 10)\n- x_label: Label for x-axis (optional, default: 'Values')\n- y_label: Label for y-axis (optional, default: 'Frequency')\n- title: Title of the plot (optional)\n- color: Color of the bars (optional, accepts standard color names or hex codes)\n\nThe histogram will automatically calculate the frequency of values falling into each bin.\n",
          "parameters": {
            "x": {
              "type": "array",
              "required": true,
              "items": {
                "type": "number"
              }
            },
            "bins": {
              "type": "integer",
              "required": false
            },
            "x_label": {
              "type": "string",
              "required": false
            },
            "y_label": {
              "type": "string",
              "required": false
            },
            "title": {
              "type": "string",
              "required": false
            },
            "color": {
              "type": "string",
              "required": false
            }
          },
          "result": {
            "type": "string",
            "required": true
          }
        },
        {
          "name": "MakePieChart",
          "description": "Create a pie chart with the provided data.\nA pie chart shows the relative proportions of different categories as slices of a circle.\n\nParameters:\n- labels: List of strings representing the category names\n- values: List of numbers representing the size of each category\n- title: Title of the plot (optional)\n- colors: List of colors for each slice (optional, accepts standard color names or hex codes)\n\nThe values will be automatically converted to percentages of the total.\nEach slice will be labeled with its category name and percentage.\n",
          "parameters": {
            "labels": {
              "type": "array",
              "required": true,
              "items": {
                "type": "string"
              }
            },
            "values": {
              "type": "array",
              "required": true,
              "items": {
                "type": "number"
              }
            },
            "title": {
              "type": "string",
              "required": false
            },
            "colors": {
              "type": "array",
              "required": false,
              "items": {
                "type": "string"
              }
            }
          },
          "result": {
            "type": "string",
            "required": true
          }
        },
        {
          "name": "GetLiveEnergyDataLink",
          "description": "Get a link for the live energy mix dashboard of Electricity Maps.\nIf you want to visualize the energy mix and the emissions of the energy in any way, use this function at the end to get a link to the Electricity Maps dashboard.\nTHIS LINK SHOULD ONLY BE USED IN ADDITION TO AN ACTUAL PLOT, NOT AS A STANDALONE VISUALIZATION!\nIT ONLY RETURNS A LINK, NO IFRAME OR IMAGE!\n\nParameters:\n- country_code: Two-letter country code (optional, default: 'DE' for Germany)\n- height: Height of the iframe in pixels (optional, default: 700)\n- timeframe: Time period to display (optional, default: '72h'). Options:\n    * '72h': Last 72 hours with hourly data\n    * '3mo': Last 3 months with daily data\n    * '12mo': Last 12 months with monthly data\n    * 'all': All time view with monthly data\n\nThe link will show electricity data for the specified country and time period.\nIF THE TASK DOES NOT SPECIFY A COUNTRY, TIMEFRAME OR HEIGHT, DON'T USE ANY OF THESE PARAMETERS AND LEAVE THEM AT THEIR DEFAULT VALUES!\n",
          "parameters": {
            "country_code": {
              "type": "string",
              "required": false
            },
            "height": {
              "type": "number",
              "required": false
            },
            "timeframe": {
              "type": "string",
              "required": false
            }
          },
          "result": {
            "type": "string",
            "required": true
          }
        }
      ],
      "summary": "This agent specializes in creating a variety of data visualizations, including line plots, scatter plots, bar plots, histograms, and pie charts, with customizable parameters such as axis labels, titles, colors, and data formatting (e.g., numeric, date, or datetime). It is designed for visualizing numerical and categorical data distributions, trends, and proportions, and supports advanced customization for precise representation. Additionally, it can provide a link to the Electricity Maps live energy mix dashboard for supplementary visualization of energy data, but this link is intended to complement plots, not replace them."
    },
    "beintelli_agent": {
      "functions": [
        {
          "name": "FindMyCar",
          "description": "Get info on a car in the BeIntelli vehicle fleet.",
          "parameters": {
            "name": {
              "type": "string",
              "required": true
            }
          },
          "result": {
            "type": "Vehicle",
            "required": true
          }
        },
        {
          "name": "FindParkingSpots",
          "description": "Get free parking spots around a given location.",
          "parameters": {
            "location": {
              "type": "array",
              "required": true,
              "items": {
                "type": "number"
              }
            },
            "radius_meters": {
              "type": "integer",
              "required": true
            }
          },
          "result": {
            "type": "array",
            "required": true,
            "items": {
              "type": "ParkingSpot"
            }
          }
        },
        {
          "name": "GetAirQuality",
          "description": "Get air quality close to a given location.",
          "parameters": {
            "location": {
              "type": "array",
              "required": true,
              "items": {
                "type": "number"
              }
            },
            "max_distance_meters": {
              "type": "integer",
              "required": true
            }
          },
          "result": {
            "type": "AirQuality",
            "required": true
          }
        }
      ],
      "summary": "This agent is designed to support urban mobility and environmental awareness by providing information related to vehicles, parking, and air quality. It can locate specific cars within the BeIntelli fleet, identify available parking spots within a specified radius of a location, and retrieve air quality data near a given area within a defined distance. It is ideal for tasks involving vehicle tracking, parking management, and environmental monitoring in urban settings."
    },
    "beintelli_forecasting_agent": {
      "functions": [
        {
          "name": "ForecastPollution",
          "description": "Forecast pollution metrics (no, no2, o3, r1pm1, r1pm10, r1pm25) at specificed sensor location (:= sensor_id) in specified hours (:= n_hours).",
          "parameters": {
            "n_hours": {
              "type": "integer",
              "required": true
            },
            "sensor_id": {
              "type": "string",
              "required": true
            }
          },
          "result": {
            "type": "string",
            "required": true
          }
        }
      ],
      "summary": "This agent specializes in forecasting air pollution metrics (no, no2, o3, r1pm1, r1pm10, r1pm25) for a specified sensor location over a defined number of future hours. By taking the sensor ID and the desired forecast duration (in hours) as inputs, it provides precise predictions of pollution levels at that location. It is ideal for monitoring and planning around air quality conditions in specific areas."
    },
    "navigation_agent": {
      "functions": [
        {
          "name": "ToLocation",
          "description": "Convert human-readable address to location, i.e. a tuple of (lat, long).",
          "parameters": {
            "address": {
              "type": "string",
              "required": true
            }
          },
          "result": {
            "type": "array",
            "required": true,
            "items": {
              "type": "number"
            }
          }
        },
        {
          "name": "ToAddress",
          "description": "Convert location to closest human-readable address.",
          "parameters": {
            "location": {
              "type": "array",
              "required": true,
              "items": {
                "type": "number"
              }
            }
          },
          "result": {
            "type": "string",
            "required": true
          }
        },
        {
          "name": "DirectionsToLocation",
          "description": "Navigate from one location to another, giving list of human-understandable directions for follow.",
          "parameters": {
            "location_from": {
              "type": "array",
              "required": true,
              "items": {
                "type": "number"
              }
            },
            "location_to": {
              "type": "array",
              "required": true,
              "items": {
                "type": "number"
              }
            }
          },
          "result": {
            "type": "array",
            "required": true,
            "items": {
              "type": "string"
            }
          }
        },
        {
          "name": "WaypointsToLocation",
          "description": "Navigate from one location to another, giving list of waypoints (location-tuples) to go by.",
          "parameters": {
            "location_from": {
              "type": "array",
              "required": true,
              "items": {
                "type": "number"
              }
            },
            "location_to": {
              "type": "array",
              "required": true,
              "items": {
                "type": "number"
              }
            }
          },
          "result": {
            "type": "array",
            "required": true,
            "items": {
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          }
        },
        {
          "name": "DirectionsToAddress",
          "description": "Navigate from one address to another, given list of human-understandable directions to follow.",
          "parameters": {
            "address_from": {
              "type": "string",
              "required": true
            },
            "address_to": {
              "type": "string",
              "required": true
            }
          },
          "result": {
            "type": "array",
            "required": true,
            "items": {
              "type": "string"
            }
          }
        },
        {
          "name": "WaypointsToAddress",
          "description": "Navigate from one address to another, given list of waypoints (location-tuples) to go by.",
          "parameters": {
            "address_from": {
              "type": "string",
              "required": true
            },
            "address_to": {
              "type": "string",
              "required": true
            }
          },
          "result": {
            "type": "array",
            "required": true,
            "items": {
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          }
        }
      ],
      "summary": "This agent specializes in geolocation and navigation tasks, enabling seamless conversion between human-readable addresses and geographic coordinates, as well as providing navigation guidance. It can generate human-understandable directions or waypoint-based routes for traveling between two locations or addresses. Use this agent for address-to-location conversion, location-to-address conversion, or detailed navigation assistance, whether in the form of step-by-step directions or waypoint coordinates."
    },
    "control_center_agent": {
      "functions": [
        {
          "name": "HighlightLocation",
          "description": "Highlight a single location (lat, long) on the map.",
          "parameters": {
            "location": {
              "type": "array",
              "required": true,
              "items": {
                "type": "number"
              }
            },
            "type": {
              "type": "string",
              "required": false
            },
            "label": {
              "type": "string",
              "required": false
            },
            "clear": {
              "type": "boolean",
              "required": false
            }
          },
          "result": {
            "type": "boolean",
            "required": true
          }
        },
        {
          "name": "HighlightPath",
          "description": "Highlight a list of locations (lat, long) as path on the map.",
          "parameters": {
            "locations": {
              "type": "array",
              "required": true,
              "items": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            },
            "label": {
              "type": "string",
              "required": false
            },
            "clear": {
              "type": "boolean",
              "required": false
            }
          },
          "result": {
            "type": "boolean",
            "required": true
          }
        },
        {
          "name": "ClearHighlight",
          "description": "Clear all highlights from the map.",
          "parameters": {},
          "result": {
            "type": "boolean",
            "required": true
          }
        }
      ],
      "summary": "This agent is designed to visually manage and manipulate map highlights for locations and paths. It can highlight a single location or a series of locations as a path on the map, with optional labels and the ability to clear previous highlights. It is ideal for tasks requiring dynamic visualization of geographic data, such as marking points of interest, plotting routes, or resetting map displays."
    },
    "shelf-agent": {
      "functions": [
        {
          "name": "FindInShelf",
          "description": "Find the ID of the shelf that should contain the given item, or -1 if no such shelf exists.",
          "parameters": {
            "item": {
              "type": "string",
              "required": true
            }
          },
          "result": {
            "type": "integer",
            "required": true
          }
        },
        {
          "name": "OpenShelf",
          "description": "Open the shelf with the given ID. Only use this action when you can see the shelf!",
          "parameters": {
            "shelf": {
              "type": "integer",
              "required": true
            }
          },
          "result": {
            "type": "boolean",
            "required": true
          }
        },
        {
          "name": "CloseShelf",
          "description": "Close the shelf with the given ID. Only use this action when you can see the shelf!",
          "parameters": {
            "shelf": {
              "type": "integer",
              "required": true
            }
          },
          "result": {
            "type": "boolean",
            "required": true
          }
        }
      ],
      "summary": "This agent is designed to locate, access, and manage shelves containing specific items. It identifies the appropriate shelf for a given item using its ID, then facilitates interaction by opening or closing the shelf, provided the shelf is visible. It is specifically used for tasks involving the retrieval or storage of items in a structured shelving system."
    },
    "desk-agent": {
      "functions": [
        {
          "name": "GetHeight",
          "description": "Get the current height of the desk, in centimeters",
          "parameters": {},
          "result": {
            "type": "number",
            "required": true
          }
        },
        {
          "name": "SetHeight",
          "description": "Set the height of the desk, in centimeters",
          "parameters": {
            "height": {
              "type": "number",
              "required": true
            }
          },
          "result": null
        },
        {
          "name": "SetOccupied",
          "description": "Set the desk's current occupied state.",
          "parameters": {
            "state": {
              "type": "boolean",
              "required": true
            }
          },
          "result": null
        },
        {
          "name": "SetLight",
          "description": "Set the state and color of the desk's ambient light. RGB color values are from 0 to 255.",
          "parameters": {
            "state": {
              "type": "boolean",
              "required": true
            },
            "red": {
              "type": "integer",
              "required": true
            },
            "green": {
              "type": "integer",
              "required": true
            },
            "blue": {
              "type": "integer",
              "required": true
            }
          },
          "result": null
        }
      ],
      "summary": "This agent manages a smart desk by controlling its height, occupancy state, and ambient lighting. It can retrieve or adjust the desk's height in centimeters, toggle its occupied status, and control the desk's ambient light by turning it on/off and setting specific RGB color values. It is ideal for automating desk adjustments, monitoring usage, and customizing lighting for ergonomic or aesthetic purposes."
    },
    "home-assistant-agent": {
      "functions": [
        {
          "name": "GetSensorsList",
          "description": "Get list of all devices with 'multisensor' in their name. Those include the different sub-sensors of the multisensors, each including the main sensor's ID in their name as well as what they measure.",
          "parameters": {},
          "result": {
            "type": "array",
            "required": true,
            "items": {
              "type": "string"
            }
          }
        },
        {
          "name": "GetSensorId",
          "description": "Get sensor ID corresponding to a given room. Room name does not have to be a perfect match.",
          "parameters": {
            "room": {
              "type": "string",
              "required": true
            }
          },
          "result": {
            "type": "string",
            "required": false
          }
        },
        {
          "name": "GetTemperature",
          "description": "Get temperature value for a given sensor",
          "parameters": {
            "sensorId": {
              "type": "string",
              "required": true
            }
          },
          "result": {
            "type": "number",
            "required": true
          }
        },
        {
          "name": "GetCo2",
          "description": "Get Co2 value for a given sensor",
          "parameters": {
            "sensorId": {
              "type": "string",
              "required": true
            }
          },
          "result": {
            "type": "number",
            "required": true
          }
        },
        {
          "name": "GetValue",
          "description": "Get the value for a given sensor and property, searching in the list of sensors for a match",
          "parameters": {
            "sensorId": {
              "type": "string",
              "required": true
            },
            "key": {
              "type": "string",
              "required": true
            }
          },
          "result": {
            "type": "number",
            "required": true
          }
        }
      ],
      "summary": "This agent is designed to monitor environmental data from multisensors in a home setting. It identifies and retrieves sensor data by room or sensor ID, including temperature, CO2 levels, or other specific properties. It is ideal for tasks requiring precise environmental monitoring or data retrieval from multisensors in specific rooms or locations."
    },
    "bobbi-agent": {
      "functions": [
        {
          "name": "AskKnowledgeLLM",
          "description": "This Action forwards the given question to another language model that can help with answering questions about Berlin's administration, providing information about local events and attractions, assisting with the search for relevant documents and forms, and booking appointments with the Berlin administration. Make sure to provide all necessary information directly in the question, so the language model can answer it in the best way possible.",
          "parameters": {
            "question": {
              "type": "string",
              "required": true
            }
          },
          "result": {
            "type": "string",
            "required": true
          }
        }
      ],
      "summary": "This agent specializes in assisting with inquiries related to Berlin's administration, local events, attractions, document searches, and appointment bookings. It leverages a language model to provide accurate and context-specific answers based on the user's detailed questions. It is ideal for users seeking administrative support, event information, or help navigating Berlin's local services."
    },
    "data-agent": {
      "functions": [
        {
          "name": "AnalyseHistoricDataFromCSV",
          "description": "This Action forwards the given question to another language model that has access to CSV files with historic time series data on different topics, such as carbon monoxide in some areas of Berlin, traffic accidents, Covid-19 case numbers, as well as historic data on temperatures and noise levels in different rooms of the ZEKI real laboratory (kitchen, experience hub, conference room and coworking space). User questions are translated to appropriate CSV queries and the result is returned, which may be a single number, or a list or dictionary of numbers for more complex requests, or the URL to an image, generated and hosted by the service. Make sure to provide all necessary information directly in the question, so the language model can answer it in the best way possible.",
          "parameters": {
            "question": {
              "type": "string",
              "required": true
            }
          },
          "result": {
            "type": "object",
            "required": true
          }
        },
        {
          "name": "AnalyseHistoricDataFromDB",
          "description": "This Action forwards the given question to another language model that has access to up-to-date time series data in the InfluxDB of ZEKI, with e.g. temperatures and noise levels in different rooms of the ZEKI real laboratory (kitchen, experience hub, conference room and coworking space). User questions are translated to appropriate DB queries and the result is returned, which may be a single number, or a list or dictionary of numbers for more complex requests, or the URL to an image, generated and hosted by the service. Make sure to provide all necessary information directly in the question, so the language model can answer it in the best way possible.",
          "parameters": {
            "question": {
              "type": "string",
              "required": true
            }
          },
          "result": {
            "type": "object",
            "required": true
          }
        },
        {
          "name": "PredictFromQuery",
          "description": "This action can create predictions for different data, especially on temperatures and noise levels in the rooms of the ZEKI real laboratory (kitchen, experience hub, conference room and coworking space). The given query is analysed by an LLM to extract the 'what', 'where' and 'when', which is then used to create an appropriate ML model for the request. The result usually contains two parts: numerical data, and a link to a visualisation of the data.",
          "parameters": {
            "question": {
              "type": "string",
              "required": true
            }
          },
          "result": {
            "type": "object",
            "required": true
          }
        },
        {
          "name": "PredictFromWhatWhereWhen",
          "description": "This action can create predictions for different data, especially on temperatures and noise levels in the rooms of the ZEKI real laboratory (kitchen, experience hub, conference room and coworking space). The 'what' (what to predict), 'where' (e.g. the room at ZEKI) and 'when' (number of hours into the future) is used to create an appropriate ML model for the request. The result usually contains two parts: numerical data, and a link to a visualisation of the data.",
          "parameters": {
            "what": {
              "type": "string",
              "required": true
            },
            "where": {
              "type": "string",
              "required": true
            },
            "when": {
              "type": "number",
              "required": true
            }
          },
          "result": {
            "type": "object",
            "required": true
          }
        }
      ],
      "summary": "This agent specializes in analyzing and predicting time series data, particularly related to environmental metrics (e.g., temperatures, noise levels) and other historic datasets (e.g., carbon monoxide levels, traffic accidents, Covid-19 cases). It can retrieve insights from historic CSV files or up-to-date InfluxDB data, and it generates predictions based on user-defined parameters such as \"what,\" \"where,\" and \"when,\" providing both numerical results and visualizations. It is ideal for answering data-driven questions, analyzing trends, and forecasting future values within the context of the ZEKI real laboratory or other predefined datasets."
    },
    "information-agent": {
      "functions": [
        {
          "name": "GetStockPrices",
          "description": "Find values on the stock market, using the Yahoo Finance API. Query is used to search for a stock, e.g. 'Apple'.",
          "parameters": {
            "query": {
              "type": "string",
              "required": true
            }
          },
          "result": {
            "type": "object",
            "required": true
          }
        },
        {
          "name": "SummarizeWikipedia",
          "description": "Find an article on Wikipedia and summarize the page with GPT.",
          "parameters": {
            "query": {
              "type": "string",
              "required": true
            }
          },
          "result": {
            "type": "string",
            "required": true
          }
        },
        {
          "name": "SummarizeWebsite",
          "description": "Open a specific website and summarize the page with GPT, either in general or w.r.t. a specific question.",
          "parameters": {
            "url": {
              "type": "string",
              "required": true
            },
            "query": {
              "type": "string",
              "required": false
            }
          },
          "result": {
            "type": "string",
            "required": true
          }
        },
        {
          "name": "SearchGoogle",
          "description": "Search for something on Google, try the first few pages and summarize the results with GPT.",
          "parameters": {
            "query": {
              "type": "string",
              "required": true
            },
            "num_results": {
              "type": "integer",
              "required": true
            }
          },
          "result": {
            "type": "object",
            "required": true
          }
        },
        {
          "name": "GetWeatherForecast",
          "description": "Get weather forecasts for a given city name for the given amount of days in advance.",
          "parameters": {
            "locationName": {
              "type": "string",
              "required": true
            },
            "daysAhead": {
              "type": "integer",
              "required": true
            }
          },
          "result": {
            "type": "object",
            "required": true
          }
        }
      ],
      "summary": "This agent is designed to retrieve, summarize, and present information from various sources. It can fetch stock prices using the Yahoo Finance API, summarize Wikipedia articles, websites, or Google search results using GPT, and provide weather forecasts for specific locations and timeframes. It is best used for quickly gathering and condensing information on financial data, general knowledge, web content, search engine results, and weather updates."
    },
    "servlet-agent": {
      "functions": [
        {
          "name": "ShowMessage",
          "description": null,
          "parameters": {
            "message": {
              "type": "string",
              "required": true
            },
            "seconds": {
              "type": "integer",
              "required": false
            }
          },
          "result": null
        },
        {
          "name": "GetValue",
          "description": null,
          "parameters": {
            "key": {
              "type": "string",
              "required": true
            }
          },
          "result": {
            "type": "string",
            "required": true
          }
        },
        {
          "name": "SetTitle",
          "description": null,
          "parameters": {
            "title": {
              "type": "string",
              "required": true
            }
          },
          "result": null
        },
        {
          "name": "SetValue",
          "description": null,
          "parameters": {
            "key": {
              "type": "string",
              "required": true
            },
            "value": {
              "type": "string",
              "required": true
            }
          },
          "result": null
        }
      ],
      "summary": "This agent is designed for managing and displaying key-value data and user interface elements. It allows retrieving and storing key-value pairs, setting a title for the interface, and displaying messages for a specified duration. It is best used for applications requiring dynamic data management and user interaction through messages and titles."
    }
  },
  "agents_detailed": [
    {
      "type": "function",
      "function": {
        "name": "DataVisAgent--MakeLinePlot",
        "description": "Make a line plot of the provided data.\nSupports automatic conversion to different x-axis value types (string, numeric, date, datetime).\nThe x value parameter is expected to be a list of strings which is then converted to the specified x_value_type.\n\nParameters:\n- x: List of strings representing the x-axis values\n- y: List of numbers representing the y-axis values\n- format: Line format string (optional, available options: '-', '--', '-.', ':' , default: '-')\n- x_label: Label for x-axis (optional)\n- y_label: Label for y-axis (optional)\n- title: Title of the plot (optional)\n- line_width: Width of the line (optional)\n- color: Color of the line (optional, accepts standard color names or hex codes)\n- x_value_type: How to interpret x-axis values (optional, default: 'string'). Options:\n    * 'numeric': Convert to numbers \n    * 'date': Convert to dates (format: \"%Y-%m-%d\" example:\"2025-02-16\")\n    * 'datetime': Convert to datetime (format: \"%Y-%m-%d %H:%M:%S\" example:\"2025-02-16 18:23:12\")\n    * 'string': Treat as pl",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "x",
                "y"
              ],
              "type": "object",
              "properties": {
                "x": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "y": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                },
                "format": {
                  "type": "string"
                },
                "x_label": {
                  "type": "string"
                },
                "y_label": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "line_width": {
                  "type": "number"
                },
                "color": {
                  "type": "string"
                },
                "x_value_type": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "DataVisAgent--MakeScatterPlot",
        "description": "Make a scatter plot of the provided data.\nSupports automatic conversion to different x-axis value types (string, numeric, date, datetime).\nThe x value parameter is expected to be a list of strings which is then converted to the specified x_value_type.\n\nParameters:\n- x: List of strings representing the x-axis values\n- y: List of numbers representing the y-axis values\n- x_label: Label for x-axis (optional)\n- y_label: Label for y-axis (optional)\n- title: Title of the plot (optional)\n- size: Size of the scatter points (optional, default is 20)\n- color: Color of the points (optional, accepts standard color names or hex codes)\n- x_value_type: How to interpret x-axis values (optional, default: 'string'). Options:\n    * 'numeric': Convert to numbers\n    * 'date': Convert to dates (format: \"%Y-%m-%d\" example:\"2025-02-16\")\n    * 'datetime': Convert to datetime (format: \"%Y-%m-%d %H:%M:%S\" example:\"2025-02-16 18:23:12\")\n    * 'string': Treat as plain text (default)\n",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "x",
                "y"
              ],
              "type": "object",
              "properties": {
                "x": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "y": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                },
                "x_label": {
                  "type": "string"
                },
                "y_label": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "size": {
                  "type": "number"
                },
                "color": {
                  "type": "string"
                },
                "x_value_type": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "DataVisAgent--MakeBarPlot",
        "description": "Make a bar plot of the provided data. \nSupports automatic conversion to different x-axis value types (string, numeric, date, datetime).\nThe x value parameter is expected to be a list of strings which is then converted to the specified x_value_type.\n            \nParameters:\n- x: List of strings representing the x-axis categories/labels\n- y: List of numbers representing the height of each bar\n- x_label: Label for x-axis (optional)\n- y_label: Label for y-axis (optional)\n- title: Title of the plot (optional)\n- width: Width of the bars, between 0 and 1 (optional, default: 0.8)\n- color: Color of the bars (optional, accepts standard color names or hex codes)\n- x_value_type: How to interpret x-axis values (optional, default: 'string'). Options:\n    * 'string': Treat as plain text (default)\n    * 'numeric': Convert to numbers if possible\n    * 'date': Convert to dates (format: \"%Y-%m-%d\" example:\"2025-02-16\")\n    * 'datetime': Convert to datetime (format: \"%Y-%m-%d %H:%M:%S\" example:\"2025-02-16 18:23:12\")\n    \nAny con",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "x",
                "y"
              ],
              "type": "object",
              "properties": {
                "x": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "y": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                },
                "x_label": {
                  "type": "string"
                },
                "y_label": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "width": {
                  "type": "number"
                },
                "color": {
                  "type": "string"
                },
                "x_value_type": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "DataVisAgent--MakeHistogram",
        "description": "Create a histogram of the provided data.\nA histogram represents the distribution of numerical data by splitting it into bins.\n\nParameters:\n- x: List of numbers to create histogram from\n- bins: Number of bars/bins to group the data into (optional, default: 10)\n- x_label: Label for x-axis (optional, default: 'Values')\n- y_label: Label for y-axis (optional, default: 'Frequency')\n- title: Title of the plot (optional)\n- color: Color of the bars (optional, accepts standard color names or hex codes)\n\nThe histogram will automatically calculate the frequency of values falling into each bin.\n",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "x"
              ],
              "type": "object",
              "properties": {
                "x": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                },
                "bins": {
                  "type": "integer",
                  "format": "int32"
                },
                "x_label": {
                  "type": "string"
                },
                "y_label": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "color": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "DataVisAgent--MakePieChart",
        "description": "Create a pie chart with the provided data.\nA pie chart shows the relative proportions of different categories as slices of a circle.\n\nParameters:\n- labels: List of strings representing the category names\n- values: List of numbers representing the size of each category\n- title: Title of the plot (optional)\n- colors: List of colors for each slice (optional, accepts standard color names or hex codes)\n\nThe values will be automatically converted to percentages of the total.\nEach slice will be labeled with its category name and percentage.\n",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "labels",
                "values"
              ],
              "type": "object",
              "properties": {
                "labels": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "values": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                },
                "title": {
                  "type": "string"
                },
                "colors": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "DataVisAgent--GetLiveEnergyDataLink",
        "description": "Get a link for the live energy mix dashboard of Electricity Maps.\nIf you want to visualize the energy mix and the emissions of the energy in any way, use this function at the end to get a link to the Electricity Maps dashboard.\nTHIS LINK SHOULD ONLY BE USED IN ADDITION TO AN ACTUAL PLOT, NOT AS A STANDALONE VISUALIZATION!\nIT ONLY RETURNS A LINK, NO IFRAME OR IMAGE!\n\nParameters:\n- country_code: Two-letter country code (optional, default: 'DE' for Germany)\n- height: Height of the iframe in pixels (optional, default: 700)\n- timeframe: Time period to display (optional, default: '72h'). Options:\n    * '72h': Last 72 hours with hourly data\n    * '3mo': Last 3 months with daily data\n    * '12mo': Last 12 months with monthly data\n    * 'all': All time view with monthly data\n\nThe link will show electricity data for the specified country and time period.\nIF THE TASK DOES NOT SPECIFY A COUNTRY, TIMEFRAME OR HEIGHT, DON'T USE ANY OF THESE PARAMETERS AND LEAVE THEM AT THEIR DEFAULT VALUES!\n",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "type": "object",
              "properties": {
                "country_code": {
                  "type": "string"
                },
                "height": {
                  "type": "number"
                },
                "timeframe": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "beintelli_agent--FindMyCar",
        "description": "Get info on a car in the BeIntelli vehicle fleet.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "name"
              ],
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "beintelli_agent--FindParkingSpots",
        "description": "Get free parking spots around a given location.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "location",
                "radius_meters"
              ],
              "type": "object",
              "properties": {
                "location": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                },
                "radius_meters": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "beintelli_agent--GetAirQuality",
        "description": "Get air quality close to a given location.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "location",
                "max_distance_meters"
              ],
              "type": "object",
              "properties": {
                "location": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                },
                "max_distance_meters": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "beintelli_forecasting_agent--ForecastPollution",
        "description": "Forecast pollution metrics (no, no2, o3, r1pm1, r1pm10, r1pm25) at specificed sensor location (:= sensor_id) in specified hours (:= n_hours).",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "n_hours",
                "sensor_id"
              ],
              "type": "object",
              "properties": {
                "n_hours": {
                  "type": "integer",
                  "format": "int32"
                },
                "sensor_id": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "navigation_agent--ToLocation",
        "description": "Convert human-readable address to location, i.e. a tuple of (lat, long).",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "address"
              ],
              "type": "object",
              "properties": {
                "address": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "navigation_agent--ToAddress",
        "description": "Convert location to closest human-readable address.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "location"
              ],
              "type": "object",
              "properties": {
                "location": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "navigation_agent--DirectionsToLocation",
        "description": "Navigate from one location to another, giving list of human-understandable directions for follow.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "location_from",
                "location_to"
              ],
              "type": "object",
              "properties": {
                "location_from": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                },
                "location_to": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "navigation_agent--WaypointsToLocation",
        "description": "Navigate from one location to another, giving list of waypoints (location-tuples) to go by.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "location_from",
                "location_to"
              ],
              "type": "object",
              "properties": {
                "location_from": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                },
                "location_to": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "navigation_agent--DirectionsToAddress",
        "description": "Navigate from one address to another, given list of human-understandable directions to follow.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "address_from",
                "address_to"
              ],
              "type": "object",
              "properties": {
                "address_from": {
                  "type": "string"
                },
                "address_to": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "navigation_agent--WaypointsToAddress",
        "description": "Navigate from one address to another, given list of waypoints (location-tuples) to go by.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "address_from",
                "address_to"
              ],
              "type": "object",
              "properties": {
                "address_from": {
                  "type": "string"
                },
                "address_to": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "control_center_agent--HighlightLocation",
        "description": "Highlight a single location (lat, long) on the map.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "location"
              ],
              "type": "object",
              "properties": {
                "location": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                },
                "type": {
                  "type": "string"
                },
                "label": {
                  "type": "string"
                },
                "clear": {
                  "type": "boolean"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "control_center_agent--HighlightPath",
        "description": "Highlight a list of locations (lat, long) as path on the map.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "locations"
              ],
              "type": "object",
              "properties": {
                "locations": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  }
                },
                "label": {
                  "type": "string"
                },
                "clear": {
                  "type": "boolean"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "control_center_agent--ClearHighlight",
        "description": "Clear all highlights from the map.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "type": "object"
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "shelf-agent--FindInShelf",
        "description": "Find the ID of the shelf that should contain the given item, or -1 if no such shelf exists.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "item"
              ],
              "type": "object",
              "properties": {
                "item": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "shelf-agent--OpenShelf",
        "description": "Open the shelf with the given ID. Only use this action when you can see the shelf!",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "shelf"
              ],
              "type": "object",
              "properties": {
                "shelf": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "shelf-agent--CloseShelf",
        "description": "Close the shelf with the given ID. Only use this action when you can see the shelf!",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "shelf"
              ],
              "type": "object",
              "properties": {
                "shelf": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "desk-agent--GetHeight",
        "description": "Get the current height of the desk, in centimeters",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "type": "object"
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "desk-agent--SetHeight",
        "description": "Set the height of the desk, in centimeters",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "height"
              ],
              "type": "object",
              "properties": {
                "height": {
                  "type": "number"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "desk-agent--SetOccupied",
        "description": "Set the desk's current occupied state.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "state"
              ],
              "type": "object",
              "properties": {
                "state": {
                  "type": "boolean"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "desk-agent--SetLight",
        "description": "Set the state and color of the desk's ambient light. RGB color values are from 0 to 255.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "blue",
                "green",
                "red",
                "state"
              ],
              "type": "object",
              "properties": {
                "state": {
                  "type": "boolean"
                },
                "red": {
                  "type": "integer",
                  "format": "int32"
                },
                "green": {
                  "type": "integer",
                  "format": "int32"
                },
                "blue": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "home-assistant-agent--GetSensorsList",
        "description": "Get list of all devices with 'multisensor' in their name. Those include the different sub-sensors of the multisensors, each including the main sensor's ID in their name as well as what they measure.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "type": "object"
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "home-assistant-agent--GetSensorId",
        "description": "Get sensor ID corresponding to a given room. Room name does not have to be a perfect match.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "room"
              ],
              "type": "object",
              "properties": {
                "room": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "home-assistant-agent--GetTemperature",
        "description": "Get temperature value for a given sensor",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "sensorId"
              ],
              "type": "object",
              "properties": {
                "sensorId": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "home-assistant-agent--GetCo2",
        "description": "Get Co2 value for a given sensor",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "sensorId"
              ],
              "type": "object",
              "properties": {
                "sensorId": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "home-assistant-agent--GetValue",
        "description": "Get the value for a given sensor and property, searching in the list of sensors for a match",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "key",
                "sensorId"
              ],
              "type": "object",
              "properties": {
                "sensorId": {
                  "type": "string"
                },
                "key": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "bobbi-agent--AskKnowledgeLLM",
        "description": "This Action forwards the given question to another language model that can help with answering questions about Berlin's administration, providing information about local events and attractions, assisting with the search for relevant documents and forms, and booking appointments with the Berlin administration. Make sure to provide all necessary information directly in the question, so the language model can answer it in the best way possible.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "question"
              ],
              "type": "object",
              "properties": {
                "question": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "data-agent--AnalyseHistoricDataFromCSV",
        "description": "This Action forwards the given question to another language model that has access to CSV files with historic time series data on different topics, such as carbon monoxide in some areas of Berlin, traffic accidents, Covid-19 case numbers, as well as historic data on temperatures and noise levels in different rooms of the ZEKI real laboratory (kitchen, experience hub, conference room and coworking space). User questions are translated to appropriate CSV queries and the result is returned, which may be a single number, or a list or dictionary of numbers for more complex requests, or the URL to an image, generated and hosted by the service. Make sure to provide all necessary information directly in the question, so the language model can answer it in the best way possible.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "question"
              ],
              "type": "object",
              "properties": {
                "question": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "data-agent--AnalyseHistoricDataFromDB",
        "description": "This Action forwards the given question to another language model that has access to up-to-date time series data in the InfluxDB of ZEKI, with e.g. temperatures and noise levels in different rooms of the ZEKI real laboratory (kitchen, experience hub, conference room and coworking space). User questions are translated to appropriate DB queries and the result is returned, which may be a single number, or a list or dictionary of numbers for more complex requests, or the URL to an image, generated and hosted by the service. Make sure to provide all necessary information directly in the question, so the language model can answer it in the best way possible.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "question"
              ],
              "type": "object",
              "properties": {
                "question": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "data-agent--PredictFromQuery",
        "description": "This action can create predictions for different data, especially on temperatures and noise levels in the rooms of the ZEKI real laboratory (kitchen, experience hub, conference room and coworking space). The given query is analysed by an LLM to extract the 'what', 'where' and 'when', which is then used to create an appropriate ML model for the request. The result usually contains two parts: numerical data, and a link to a visualisation of the data.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "question"
              ],
              "type": "object",
              "properties": {
                "question": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "data-agent--PredictFromWhatWhereWhen",
        "description": "This action can create predictions for different data, especially on temperatures and noise levels in the rooms of the ZEKI real laboratory (kitchen, experience hub, conference room and coworking space). The 'what' (what to predict), 'where' (e.g. the room at ZEKI) and 'when' (number of hours into the future) is used to create an appropriate ML model for the request. The result usually contains two parts: numerical data, and a link to a visualisation of the data.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "what",
                "when",
                "where"
              ],
              "type": "object",
              "properties": {
                "what": {
                  "type": "string"
                },
                "where": {
                  "type": "string"
                },
                "when": {
                  "type": "number"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "information-agent--GetStockPrices",
        "description": "Find values on the stock market, using the Yahoo Finance API. Query is used to search for a stock, e.g. 'Apple'.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "query"
              ],
              "type": "object",
              "properties": {
                "query": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "information-agent--SummarizeWikipedia",
        "description": "Find an article on Wikipedia and summarize the page with GPT.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "query"
              ],
              "type": "object",
              "properties": {
                "query": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "information-agent--SummarizeWebsite",
        "description": "Open a specific website and summarize the page with GPT, either in general or w.r.t. a specific question.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "url"
              ],
              "type": "object",
              "properties": {
                "url": {
                  "type": "string"
                },
                "query": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "information-agent--SearchGoogle",
        "description": "Search for something on Google, try the first few pages and summarize the results with GPT.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "num_results",
                "query"
              ],
              "type": "object",
              "properties": {
                "query": {
                  "type": "string"
                },
                "num_results": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "information-agent--GetWeatherForecast",
        "description": "Get weather forecasts for a given city name for the given amount of days in advance.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "daysAhead",
                "locationName"
              ],
              "type": "object",
              "properties": {
                "locationName": {
                  "type": "string"
                },
                "daysAhead": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "servlet-agent--ShowMessage",
        "description": "",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "message"
              ],
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                },
                "seconds": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "servlet-agent--GetValue",
        "description": "",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "key"
              ],
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "servlet-agent--SetTitle",
        "description": "",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "title"
              ],
              "type": "object",
              "properties": {
                "title": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "servlet-agent--SetValue",
        "description": "",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "key",
                "value"
              ],
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    }
  ]
}