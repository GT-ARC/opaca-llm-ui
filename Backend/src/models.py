"""
Request and response models used in the FastAPI routes (and in some of the implementations).
"""
from enum import Enum
from typing import List, Dict, Any, Iterator, ClassVar, Annotated
from datetime import datetime, timezone
import logging
import uuid
import os
import time
import traceback
import asyncio

from starlette.websockets import WebSocket
from openai import AsyncOpenAI
from pydantic import BaseModel, model_validator, Field, PrivateAttr, SerializeAsAny, AfterValidator, BeforeValidator

from .opaca_client import OpacaClient


logger = logging.getLogger(__name__)


def get_supported_models():
    return [
        (url, key, models.split(","))
        for url, key, models in zip(
            os.getenv("LLM_URLS", "openai").split(";"),
            os.getenv("LLM_APIKEYS", "").split(";"),
            os.getenv("LLM_MODELS", "gpt-4o-mini,gpt-4o").split(";"),
        )
    ]


class WebsocketMessage(BaseModel):
    """
    Base class for model elements that are streamed via websocket.
    All of those should have a "type" attribute that reflects their class name.
    """
    type: str = Field(...)

    @model_validator(mode="before")
    @classmethod
    def set_type(cls, values):
        return {**values, "type": cls.__name__}


class ConnectRequest(BaseModel):
    """
    Used as payload for the `/connect` route.

    Attributes
        url: The base url to be used for every interaction with the OPACA  platform.
        user: OPACA platform user name (when using auth), or null
        pwd: OPACA platform password (when using auth), or null
    """
    url: str
    user: str | None
    pwd: str | None


class QueryRequest(BaseModel):
    """
    Used as the expected body argument in the `/query/{method}` endpoints

    Attributes
        user_query: The query a user has input into the OPACA LLM ChatBot.
        streaming: whether intermediate results should be streamed via Websocket
    """
    user_query: str
    streaming: bool = False


class AgentMessage(WebsocketMessage):
    """
    Used as the standard response model each time an LLM Agent is invoked.
    It stores individual information generated by the various agents

    Attributes:
        agent: The name of the agent
        content: The content of the message generated by the agent
        tools: List of generated tool calls
        response_metadata: Metadata associated with the response including token usage
        execution_time: Time it took to execute the response
        formatted_output: JSON output generated by the agent, if requested with response_format
    """
    id: uuid.UUID = Field(default_factory=uuid.uuid4)
    agent: str
    content: str = ''
    tools: List['ToolCall'] = []
    response_metadata: Dict[str, Any] = {}
    execution_time: float = .0
    formatted_output: Any = None


class QueryResponse(WebsocketMessage):
    """
    The final response that will be sent back to the frontend. Contains a list of `AgentMessages`
    that were generated during the response generation as well as final response or error.

    Attributes:
        query: The original user query that was sent to the backend.
        agent_messages: A list of agent messages that were created during the course of the response generation.
        iterations: The total number of internal iterations that were executed before returning the final response.
        execution_time: The total execution time it took for the selected method to generate an answer.
        content: The generated response that will be shown to the user.
        error: An optional output for any error messages that were generated.
    """
    query: str = ''
    agent_messages: List[AgentMessage] = []
    iterations: int = 0
    execution_time: float = .0
    content: str = ''
    error: str = ''

    @staticmethod
    def from_exception(user_query: str, exception: Exception) -> 'QueryResponse':
        """Convert an exception (generic or OpacaException) to a QueryResponse to be
        returned to the Chat-UI."""
        if isinstance(exception, OpacaException):
            logger.error(f'OpacaException: {exception.error_message}\nTraceback: {traceback.format_exc()}')
            return QueryResponse(query=user_query, content=exception.user_message, error=exception.error_message)
        else:
            logger.error(f'Exception: {exception}\nTraceback: {traceback.format_exc()}')
            return QueryResponse(query=user_query, content='Generation failed', error=str(exception))


class OpacaFile(BaseModel):
    """
    Represents a single uploaded PDF file.

    Attributes:
        file_id: ID assigned after upload
        content_type: MIME type of the file
        file_name: The absolute path to the file
        host_ids: IDs assigned by each host the file has been uploaded to
        suspended: Whether the file should be excluded from future requests
    """
    file_id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    content_type: str
    file_name: str
    host_ids: Dict[str, str] = Field(default_factory=dict)
    suspended: bool = False


class ChatMessage(BaseModel):
    """
    Model for storing chat history messages. Represents single messages that are generated
    during the invocation of the OPACA-LLM. Can be stored as a list to be given as messages
    to a model during invocation.
    Corresponds to OpenAI's 'EasyInputMessageParam' (but simpler)

    Attributes:
        role: Role for the message, one of 'system', 'assistant', 'user', 'function', 'tool', or 'developer'.
        content: The content of the message.
    """
    role: str
    content: str | List[Dict[str, Any]]


class ToolCall(BaseModel):
    id: int
    name: str
    args: Dict[str, Any] = {}
    result: Any | None = None


class Chat(BaseModel):
    """
    Stores information about each chat.

    Attributes:
        chat_id: The unique ID of the chat.
        name: human-readable name of the chat (generated or assigned)
        responses: list of full query-responses incl. intermediate messages and meta-infos
        time_created: when the chat was created
        time_modified: when the chat was last used
        messages: Chat history (user queries and final LLM responses), used in subsequent requests. (derived)
    """
    chat_id: str
    name: str = ''
    responses: List[QueryResponse] = []
    time_created: datetime = Field(default_factory=lambda: datetime.now(tz=timezone.utc))
    time_modified: datetime = Field(default_factory=lambda: datetime.now(tz=timezone.utc))

    @property
    def messages(self) -> Iterator[ChatMessage]:
        for r in self.responses:
            yield ChatMessage(role="user", content=r.query)
            yield ChatMessage(role="assistant", content=r.content)

    def store_interaction(self, result: QueryResponse):
        self.responses.append(result)
        self.update_modified()
        self.derive_name()

    def update_modified(self) -> None:
        self.time_modified = datetime.now(tz=timezone.utc)

    def derive_name(self) -> None:
        """derive name from first interaction, if any, and if not set yet"""
        if not self.name and self.responses:
            query = self.responses[0].query
            self.name = (f'{query[:32]}â€¦' if len(query) > 32 else query)


class SessionData(BaseModel):
    """
    Stores relevant information regarding the session, including messages, configuration,
    client instances, API keys, and uploaded files.

    Attributes:
        session_id: The session's internal ID.
        chats: All the chat histories associated with the session.
        config: Configuration dictionary, one sub-dict for each method.
        abort_sent: Boolean indicating whether the current interaction should be aborted.
        uploaded_files: Dictionary storing each uploaded PDF file.
        valid_until: Timestamp until session is active.
    Transient fields:
        _websocket: Can be used to send intermediate result and other messages back to the UI
        _ws_message_queue: Used to buffer messages received from the websocket
        _opaca_client: Client instance for OPACA, for calling agent actions.
        _llm_clients: Dictionary of LLM client instances.
    
    Note: The websocket from the session should not be used directly; instead use the send/receive
    methods. Especially the latter is necessary to ensure that messages are properly received while
    the server is using the same method for waiting for the webserver to be closed again.
    """
    session_id: str = Field(default_factory=lambda: str(uuid.uuid4()), alias='_id')
    chats: Dict[str, Chat] = Field(default_factory=dict)
    config: Dict[str, Any] = Field(default_factory=dict)
    abort_sent: bool = False
    uploaded_files: Dict[str, OpacaFile] = Field(default_factory=dict)
    valid_until: float = -1

    _websocket: WebSocket | None = PrivateAttr(default=None)
    _ws_msg_queue: asyncio.Queue | None = PrivateAttr(default=None)
    _opaca_client: OpacaClient = PrivateAttr(default_factory=OpacaClient)
    _llm_clients: Dict[str, AsyncOpenAI] = PrivateAttr(default_factory=dict)

    @property
    def opaca_client(self) -> OpacaClient:
        return self._opaca_client

    def llm_client(self, the_url: str) -> AsyncOpenAI:
        if the_url not in self._llm_clients:
            for url, key, _ in get_supported_models():
                if url == the_url:
                    logger.info("creating new client for URL " + url)
                    # this distinction is no longer needed, but may still be useful to keep the openai-api-key out of the .env
                    self._llm_clients[url] = (
                        AsyncOpenAI(api_key=key if key else os.getenv("OPENAI_API_KEY")) if url == "openai" else
                        AsyncOpenAI(api_key=key, base_url=url)
                    )
                    break
            else:
                raise OpacaException(f"LLM host not supported : {the_url}")
        return self._llm_clients[the_url]

    def is_valid(self) -> bool:
        return self.valid_until > time.time()

    def get_or_create_chat(self, chat_id: str, create_if_missing: bool = False) -> Chat:
        chat = self.chats.get(chat_id)
        if chat is None and create_if_missing:
            chat = Chat(chat_id=chat_id)
            self.chats[chat_id] = chat
        elif chat is None and not create_if_missing:
            raise KeyError(f"Chat {chat_id} not found")
        return chat

    def delete_chat(self, chat_id: str) -> bool:
        if chat_id in self.chats:
            del self.chats[chat_id]
            return True
        return False

    def has_websocket(self) -> bool:
        return self._websocket is not None

    async def websocket_send(self, message: BaseModel) -> bool:
        if self._websocket:
            await self._websocket.send_json(message.model_dump_json())
            return True
        return False

    async def websocket_receive(self) -> dict:
        if self._websocket and self._ws_msg_queue:
            return await self._ws_msg_queue.get()
        else:
            raise Exception("Websocket not connected")


class SearchResult(BaseModel):
    """
    Result to some search query, showing in which chat and message the string was found.

    Attributes:
        chat_id: id of the chat where the string was found
        chat_name: name of the chat where the string was found
        message_id: id of the message  where the string was found
        excerpt: some "context" showing where the string was found
    """
    chat_id: str
    chat_name: str
    message_id: int
    excerpt: str


class OpacaException(Exception):
    """
    Custom Exception class that allows to return both a user-message (shown directly in the chat bubble)
    and error message (shown when clicking on the error-marker), as well as a status code.
    """

    def __init__(self, user_message: str, error_message: str | None = None, status_code: int = 400):
        super().__init__(user_message)
        self.user_message = user_message
        self.error_message = error_message
        self.status_code = status_code


class ContainerLoginNotification(WebsocketMessage):
    """
    This is a helper class to store information regarding the initiated container login.

    Attributes:
        message: An optional message to send to the frontend
        tool_name: The name of the tool that requires further credentials
        retry: Whether the login attempt has already been tried
    """
    container_name: str = ""
    tool_name: str = ""
    retry: bool = False


class ContainerLoginResponse(BaseModel):
    """
    Response to ContainerLoginNotification

    Attributes:
        username: username to use for container login
        password: password to use for container login
        timeout: automatically logout after this many seconds
    """
    username: str
    password: str
    timeout: int


class MethodConfig(BaseModel):
    """
    Base model class that all method config classes should inherit from.
    Provides some static helper functions for easier field definitions.
    """

    @staticmethod
    def string(default: str, options: List[str] = None, title: str = None, description: str = None) -> Any:
        return Field(default=default, json_schema_extra={'options': options}, title=title, description=description)

    @staticmethod
    def integer(default: int, min: int, max: int, step: int, title: str = None, description: str = None) -> Any:
        return Field(default=default, ge=min, le=max, multiple_of=step, title=title, description=description)

    @staticmethod
    def number(default: float, min: float, max: float, step: float, title: str = None, description: str = None) -> Any:
        return Field(default=default, title=title, description=description, ge=min, le=max, multiple_of=step)

    @staticmethod
    def boolean(default: bool = False, title: str = None, description: str = None) -> Any:
        return Field(default=default, title=title, description=description,)

    @staticmethod
    def llm_field(title: str = None, description: str = None) -> Any:
        models = [f"{url}::{model}" for url, _, models in get_supported_models() for model in models]
        return MethodConfig.string(default=models[0], options=models, title=title, description=description)

    @staticmethod
    def temperature_field(default: float = 0, min: float = 0, max: float = 2, step: float = 0.1) -> Any:
        return MethodConfig.number(default=default, min=min, max=max, step=step, title='Temperature', description='Temperature for the models')

    @staticmethod
    def max_rounds_field(default: int = 1, min: int = 1, max: int = 10, step: int = 1) -> Any:
        return MethodConfig.integer(default=default, min=min, max=max, step=step, title='Max Rounds', description='Maximum number of retries')


class ConfigPayload(BaseModel):
    """
    Stores the actual values of a given configuration and the schema that is defined in `ConfigParameter`.

    Attributes
        value: Should be a JSON storing the actual values of parameters in the format `{"key": value}`
        config_schema: A JSON holding the configuration schema definition (same keys as in `value`)
    """
    config_values: SerializeAsAny[MethodConfig]
    config_schema: Dict[str, Any]
