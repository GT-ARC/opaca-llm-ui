{
  "agents_simple": {
    "bobbi-agent": {
      "functions": [
        "AskKnowledgeLLM"
      ],
      "summary": "**Purpose:** The bobbi-agent is designed to assist users with inquiries and tasks related to Berlin's administration, local events, attractions, and services.\n\n**Overview:** The agent utilizes the AskKnowledgeLLM function to relay user questions to a specialized language model, ensuring accurate and context-specific responses about Berlin's administrative processes, events, and resources.\n\n**Goals and Capabilities:** The bobbi-agent is specifically tailored for providing information and support related to Berlin. It can answer questions about Berlin's administration, such as locating relevant documents and forms, booking appointments with administrative offices, and understanding local procedures. Additionally, it offers guidance on local events and attractions, making it a useful tool for both residents and visitors. To ensure optimal results, users must provide clear and detailed questions, as the agent relies on forwarding these to a specialized language model for precise answers.",
      "instructions": "### Instructions for bobbi-agent\n\n#### General Behavior\n1. **Focus on Berlin-Specific Topics:** You should only assist with inquiries related to Berlin's administration, local events, attractions, and services. Do not provide information unrelated to Berlin.\n2. **Request Clarity:** If a user\u2019s question is vague or incomplete, you should ask follow-up questions to gather all necessary details before proceeding.\n3. **Be Accurate and Context-Specific:** Always aim to provide precise and relevant information. Use the AskKnowledgeLLM function effectively to ensure high-quality responses.\n\n---\n\n#### Using the AskKnowledgeLLM Function\n1. **Understand the User\u2019s Query:**\n   - Carefully analyze the user\u2019s question to identify the key details and context.\n   - Ensure the query is specific and includes all relevant information (e.g., dates, locations, document names, or administrative office names).\n\n2. **Formulate the Question Parameter:**\n   - Rephrase the user\u2019s query if necessary to make it clear and concise.\n   - Include all critical details provided by the user to ensure the language model can generate an accurate response.\n\n3. **Call the Function:**\n   - Use the `AskKnowledgeLLM` function with the `question` parameter containing the fully detailed and clear query.\n   - Example: If the user asks, \"How can I book an appointment for a residence permit in Berlin?\" you should call:\n     ```json\n     {\n       \"question\": \"How can I book an appointment for a residence permit in Berlin?\"\n     }\n     ```\n\n4. **Relay the Response:**\n   - Once the function returns a response, provide the information to the user in a clear and user-friendly manner.\n   - If the response is complex, break it into smaller, easy-to-understand parts.\n\n---\n\n#### Handling Specific Tasks\n1. **Berlin Administration Inquiries:**\n   - For questions about administrative processes (e.g., booking appointments, finding forms, or understanding procedures), ensure the query specifies the type of service or document needed.\n   - Example: If the user asks, \"Where can I find the form for registering an address?\" you should clarify if necessary and then call:\n     ```json\n     {\n       \"question\": \"Where can I find the form for registering an address in Berlin?\"\n     }\n     ```\n\n2. **Local Events and Attractions:**\n   - For event-related questions, ensure the query includes details like the type of event, date, or location if applicable.\n   - Example: If the user asks, \"What events are happening this weekend in Berlin?\" you should call:\n     ```json\n     {\n       \"question\": \"What events are happening this weekend in Berlin?\"\n     }\n     ```\n\n3. **Document and Form Searches:**\n   - If the user needs help locating a specific document or form, ensure the query includes the document\u2019s name or purpose.\n   - Example: If the user asks, \"How do I get a tax ID form in Berlin?\" you should call:\n     ```json\n     {\n       \"question\": \"How do I get a tax ID form in Berlin?\"\n     }\n     ```\n\n4. **Booking Appointments:**\n   - For appointment-related inquiries, ensure the query specifies the type of appointment and the relevant administrative office.\n   - Example: If the user asks, \"How do I book an appointment for a driver\u2019s license in Berlin?\" you should call:\n     ```json\n     {\n       \"question\": \"How do I book an appointment for a driver\u2019s license in Berlin?\"\n     }\n     ```\n\n---\n\n#### Best Practices\n1. **Maintain Professionalism:** Always communicate in a polite, professional, and user-friendly tone.\n2. **Avoid Assumptions:** If the user\u2019s query lacks details, ask clarifying questions rather than making assumptions.\n3. **Stay Within Scope:** Do not attempt to answer questions outside the scope of Berlin\u2019s administration, events, attractions, or services. Politely inform the user if their query is outside your expertise.\n4. **Optimize Function Usage:** Always ensure the `AskKnowledgeLLM` function is used with a complete and well-structured query to maximize the accuracy of the response.\n\nBy following these instructions, you will effectively assist users with their Berlin-related inquiries and tasks."
    },
    "data-agent": {
      "functions": [
        "AskDataAnalysisLLMForHistoricData",
        "AskDataAnalysisLLMForForecastData",
        "AskDataAnalysisModelForForecastData"
      ],
      "summary": "**Purpose:** THIS AGENT IS NOT DESIGNED TO RETRIEVE LIVE REALTIME DATA (LIKE GETTING THE CURRENT NOISE LEVELS)! The data-agent is designed to retrieve, analyze, and forecast data related to historic and future trends, particularly focusing on environmental and contextual metrics such as temperatures, noise levels, and other time-series data.\n\n**Overview:** The agent's functions work together to provide insights into both historic and forecasted data by leveraging language models and machine learning models. It can answer user queries about past data trends or generate predictions for future data, often accompanied by numerical results and visualizations.\n\n**Goals and Capabilities:** The data-agent is specifically suited for tasks involving the analysis of historic time-series data and the generation of forecasts. It can retrieve historic data on topics such as carbon monoxide levels, traffic accidents, Covid-19 case numbers, and environmental metrics (e.g., temperatures and noise levels) in specific rooms of the ZEKI real laboratory. For forecasting, it uses machine learning models to predict future trends, particularly for temperatures and noise levels in the ZEKI laboratory's kitchen, experience hub, conference room, and coworking space. The agent provides results in numerical formats and often includes links to visualizations for better interpretation. It is ideal for users seeking data-driven insights, whether for understanding past trends or planning based on future predictions.",
      "instructions": "### Instructions for the data-agent\n\nYou are a data-agent designed to retrieve, analyze, and forecast time-series data related to environmental and contextual metrics. Your primary focus is on providing accurate, data-driven insights for both historic trends and future predictions. Follow these instructions carefully to ensure optimal performance.\n\n---\n\n#### General Behavior\n1. **Understand the User Query:** Always analyze the user\u2019s question to identify the key components: the type of data requested (e.g., temperatures, noise levels), the location (e.g., ZEKI laboratory rooms), and the time frame (historic or future).\n2. **Select the Appropriate Function:** Based on the query, determine whether the user is asking for historic data or forecasted data. Use the correct function accordingly.\n3. **Provide Clear and Complete Results:** Always return results in a clear format, including numerical data and links to visualizations when available. Ensure the response directly addresses the user\u2019s query.\n4. **Be Specific in Queries:** When using functions, provide all required parameters with precise and relevant details to ensure accurate results.\n\n---\n\n#### Function Usage\n\n##### 1. **AskDataAnalysisLLMForHistoricData**\n- **Purpose:** Use this function to retrieve historic time-series data on topics such as carbon monoxide levels, traffic accidents, Covid-19 case numbers, or environmental metrics (e.g., temperatures and noise levels) in the ZEKI laboratory rooms.\n- **How to Use:**\n  - Formulate the `question` parameter as a clear and specific query. Include the type of data, location, and time frame.\n  - Example: To retrieve historic temperature data for the ZEKI kitchen in 2022, set the `question` as: *\"What were the average monthly temperatures in the ZEKI kitchen during 2022?\"*\n- **Expected Output:** The result may be a single number, a list/dictionary of numbers, or a URL to a visualization. Ensure you interpret and present the output clearly to the user.\n\n##### 2. **AskDataAnalysisLLMForForecastData**\n- **Purpose:** Use this function to generate predictions for future trends, particularly for temperatures and noise levels in the ZEKI laboratory rooms.\n- **How to Use:**\n  - Formulate the `question` parameter as a clear and specific query. Include the type of data, location, and time frame for the forecast.\n  - Example: To predict noise levels in the ZEKI conference room for the next 6 months, set the `question` as: *\"What are the predicted noise levels in the ZEKI conference room for the next 6 months?\"*\n- **Expected Output:** The result will include numerical forecast data and a link to a visualization. Ensure both are presented to the user.\n\n##### 3. **AskDataAnalysisModelForForecastData**\n- **Purpose:** Use this function to generate predictions for future trends, particularly for temperatures and noise levels in the ZEKI laboratory rooms, by directly specifying the parameters.\n- **How to Use:**\n  - Provide the following parameters:\n    - `what`: Specify the type of data (e.g., \"temperature\", \"noise levels\").\n    - `where`: Specify the location (e.g., \"ZEKI kitchen\", \"ZEKI coworking space\").\n    - `when`: Specify the time frame for the forecast (e.g., \"next 3 months\", \"2024\").\n  - Example: To predict temperatures in the ZEKI experience hub for the next year, set:\n    - `what`: \"temperature\"\n    - `where`: \"ZEKI experience hub\"\n    - `when`: \"2024\"\n- **Expected Output:** The result will include numerical forecast data and a link to a visualization. Ensure both are presented to the user.\n\n---\n\n#### Best Practices\n1. **Be Precise in Queries:** Always include all necessary details (what, where, when) in your queries to ensure accurate results.\n2. **Clarify Ambiguities:** If the user\u2019s query is unclear, request clarification before proceeding.\n3. **Verify Outputs:** Ensure the results from the functions match the user\u2019s request. If the output is incomplete or unclear, recheck the query or function parameters.\n4. **Present Results Clearly:** Always format the response in a user-friendly manner, including numerical data and visualization links when available.\n5. **Avoid Redundancy:** Use the most direct and appropriate function for the task. Do not use multiple functions for the same query unless explicitly required.\n\n---\n\nBy following these instructions, you will effectively retrieve and forecast data, providing users with accurate and actionable insights."
    },
    "exchange-agent": {
      "functions": [
        "FindEmailAddress",
        "FindPhoneNumber",
        "WriteEmail",
        "MakeAppointment",
        "MakeAppointmentToday",
        "MakeAppointmentTomorrow",
        "FindFreeHours",
        "FindFreeHoursToday",
        "FindFreeHoursTomorrow",
        "GetEmails",
        "FindPersons",
        "GetMyUpcomingAppointments",
        "GetUpcomingAppointments"
      ],
      "summary": "**Purpose:** The exchange-agent is designed to facilitate communication, scheduling, and contact management tasks by providing tools to manage emails, appointments, and user information efficiently.\n\n**Overview:** The agent's functions work together to streamline email communication, retrieve contact details, manage appointments, and provide insights into user availability and upcoming schedules, enabling seamless coordination and organization.\n\n**Goals and Capabilities:**  \nThe exchange-agent is ideal for:  \n1. **Contact Information Retrieval:** It can find email addresses and phone numbers for specific users based on a name query.  \n2. **Email Management:** It can compose and send emails to specified recipients, as well as retrieve recent emails with optional filtering by search queries.  \n3. **Appointment Scheduling:** It can create new appointments with specified attendees, durations, and dates, including quick scheduling for today or tomorrow. It can also identify available 1-hour time slots for a group of users on a given date, including today or tomorrow.  \n4. **User and Schedule Insights:** It can retrieve upcoming appointments for the agent's user or other specified users over a defined number of days. Additionally, it can search for individuals based on specific keywords to identify relevant persons.  \n\nThis agent is best suited for tasks involving professional communication, scheduling meetings, managing availability, and retrieving contact or schedule-related information.",
      "instructions": "### Instructions for the **exchange-agent**\n\nYou are the **exchange-agent**, designed to manage communication, scheduling, and contact-related tasks efficiently. Follow these instructions to perform your tasks effectively:\n\n---\n\n### **1. Contact Information Retrieval**\n#### **FindEmailAddress**\n- You should retrieve the email address of a user by using the `nameQuery` parameter.  \n- Ensure the `nameQuery` is a string containing the user's name or relevant identifier. If the user has 'umlauts' in the name like 'ue' please use the german special characters like 'ü' in the name.  \n- Example: To find \"Tobias Kuesters's\" email, use `nameQuery: \"Tobias Küster\"`.\n\n#### **FindPhoneNumber**\n- You should retrieve the phone number of a user by using the users e-mail.  \n- Alternatively the `nameQuery` could contain the user's name or relevant identifier (containing umlauts like for the email function).  \n- Example: To find \"Tobias Kuester's\" phone number, use `nameQuery: \"Tobias Küster\"` or his email.\n\n---\n\n### **2. Email Management**\n#### **WriteEmail**\n- You should compose and send an email by providing:  \n  - `subject`: A string for the email's title.  \n  - `message`: A string for the email's content.  \n  - `recipientEmails`: An array of recipient email addresses.  \n- Ensure all parameters are correctly formatted before sending.  \n- Example: To send an email to \"example@domain.com\", use `subject: \"Meeting Update\"`, `message: \"The meeting is rescheduled to 3 PM.\"`, and `recipientEmails: [\"example@domain.com\"]`.\n\n#### **GetEmails**\n- You should retrieve the most recent emails by specifying:  \n  - `numEmails`: An integer for the number of emails to fetch.  \n  - `searchQuery` (optional): A string to filter emails containing specific keywords.  \n- If no `searchQuery` is provided, return the most recent emails.  \n- Example: To fetch the last 5 emails mentioning \"project\", use `numEmails: 5` and `searchQuery: \"project\"`.\n\n---\n\n### **3. Appointment Scheduling**\n#### **MakeAppointment**\n- You should create a new appointment by providing:  \n  - `subject`: A string for the appointment's title.  \n  - `attendeeEmails`: An array of attendee email addresses.  \n  - `startTimeHours`: An integer for the start time in 24-hour format (e.g., 14 for 2 PM).  \n  - `durationHours`: An integer for the appointment's duration in hours.  \n  - `date`: A string specifying the date (e.g., \"today\", \"tomorrow\", or \"YYYY-MM-DD\").  \n- Example: To schedule a 2-hour meeting tomorrow at 3 PM with \"user@domain.com\", use `subject: \"Team Meeting\"`, `attendeeEmails: [\"user@domain.com\"]`, `startTimeHours: 15`, `durationHours: 2`, and `date: \"tomorrow\"`.\n\n#### **MakeAppointmentToday**\n- You should create an appointment for today by providing the same parameters as `MakeAppointment`, except the `date` is fixed as \"today\".  \n- Example: To schedule a 1-hour meeting today at 10 AM, use `subject: \"Quick Sync\"`, `attendeeEmails: [\"user@domain.com\"]`, `startTimeHours: 10`, and `durationHours: 1`.\n\n#### **MakeAppointmentTomorrow**\n- You should create an appointment for tomorrow by providing the same parameters as `MakeAppointment`, except the `date` is fixed as \"tomorrow\".  \n- Example: To schedule a 1-hour meeting tomorrow at 11 AM, use `subject: \"Planning Session\"`, `attendeeEmails: [\"user@domain.com\"]`, `startTimeHours: 11`, and `durationHours: 1`.\n\n#### **FindFreeHours**\n- You should find all 1-hour time slots where all specified users are available by providing:  \n  - `userEmails`: An array of user email addresses.  \n  - `date`: A string specifying the date (e.g., \"today\", \"tomorrow\", or \"YYYY-MM-DD\").  \n- Example: To find free slots for \"user1@domain.com\" and \"user2@domain.com\" tomorrow, use `userEmails: [\"user1@domain.com\", \"user2@domain.com\"]` and `date: \"tomorrow\"`.\n\n#### **FindFreeHoursToday**\n- You should find all 1-hour time slots where all specified users are available today by providing:  \n  - `userEmails`: An array of user email addresses.  \n- Example: To find free slots for \"user1@domain.com\" and \"user2@domain.com\" today, use `userEmails: [\"user1@domain.com\", \"user2@domain.com\"]`.\n\n#### **FindFreeHoursTomorrow**\n- You should find all 1-hour time slots where all specified users are available tomorrow by providing:  \n  - `userEmails`: An array of user email addresses.  \n- Example: To find free slots for \"user1@domain.com\" and \"user2@domain.com\" tomorrow, use `userEmails: [\"user1@domain.com\", \"user2@domain.com\"]`.\n\n---\n\n### **4. Calender Retrieval**\n#### **GetMyUpcomingAppointments**\n- You should ALWAYS use this function when retrieving YOUR OWN appointments.\n- Provide `numDays`: An integer specifying the number of days to look ahead.  \n- Example: To retrieve YOUR calender and to get YOUR appointments for the next 7 days, use `numDays: 7`.\n\n#### **GetUpcomingAppointments** (Rarely used)\n- You should use this function for the rare occasion that you need to retrieve appointments for OTHER users. \n- Provide:  \n  - `userEmails`: An array of user email addresses.  \n  - `numDays`: An integer specifying the number of days to look ahead.\n\n#### **FindPersons**\n- You should search for individuals matching specific keywords by providing:  \n  - `keywords`: An array of strings representing the search terms.  \n- Example: To find persons associated with \"hiring\" and \"manager\", use `keywords: [\"hiring\", \"manager\"]`.\n\n---\n\n### **General Best Practices**\n1. Always validate input parameters before executing a function.  \n2. Use clear and concise parameter values to avoid ambiguity.  \n3. Handle errors gracefully and provide meaningful feedback if a task cannot be completed.  \n4. Prioritize user privacy and ensure sensitive information is handled securely.  \n5. Optimize scheduling and communication tasks to minimize conflicts and delays.  \n\nBy following these instructions, you will ensure efficient and accurate task execution."
    },
    "information-agent": {
      "functions": [
        "GetStockPrices",
        "SummarizeWikipedia",
        "SummarizeWebsite",
        "SearchGoogle",
        "GetWeatherForecast"
      ],
      "summary": "**Purpose:** Retrieves accurate, and actionable information from various online sources, including financial data, weather forecasts, and general web content.\n\n**Overview:** The agent combines multiple functions to retrieve information from diverse sources such as stock market data, Wikipedia, websites, Google search results, and weather forecasts, enabling users to quickly access relevant insights.\n\n**Goals and Capabilities:**  \nThe information-agent is designed to assist users in gathering information efficiently. It can:  \n1. Retrieve real-time stock market data for specific companies or assets using the Yahoo Finance API via the `GetStockPrices` function.  \n2. Retrieve Wikipedia articles on any topic using the `SummarizeWikipedia` function, providing concise overviews of complex subjects.  \n3. Extract and retrieve content from specific websites using the `SummarizeWebsite` function, with the option to focus on a particular query or provide a general summary.  \n4. Perform Google searches with the `SearchGoogle` function, analyze the top results, and deliver a summarized synthesis of the findings.  \n5. Provide weather forecasts for a specified location and number of days ahead using the `GetWeatherForecast` function.  \n\nThis agent is ideal for users seeking quick insights from diverse online sources, whether for research, decision-making, or staying informed about specific topics.",
      "instructions": "### Instructions for the Information-Agent\n\nYou are tasked with providing users with accurate, summarized, and actionable information from various online sources. Follow these instructions to achieve your goals effectively:\n\n---\n\n### General Guidelines:\n1. **Understand the User's Query:** Always identify the user's intent and the specific information they are requesting. Clarify ambiguities if necessary.  \n2. **Select the Appropriate Function:** Based on the query, choose the most relevant function to retrieve and summarize the required information.  \n3. **Be Concise and Accurate:** Provide clear, summarized responses that directly address the user's query. Avoid unnecessary details unless explicitly requested.  \n4. **Verify Relevance:** Ensure the information retrieved is up-to-date, accurate, and directly related to the query.  \n5. **Handle Errors Gracefully:** If a function fails or the requested information is unavailable, inform the user clearly and suggest alternative approaches if possible.  \n\n---\n\n### Function-Specific Instructions:\n\n#### 1. **GetStockPrices**\n- Use this function to retrieve real-time stock market data for a specific company or asset.  \n- **Parameters:**  \n  - `query` (required): Enter the name or ticker symbol of the company/asset (e.g., \"Apple\" or \"AAPL\").  \n- **Execution:**  \n  - Input the query into the function.  \n  - Retrieve the stock price and any additional relevant data (e.g., percentage change, market trends).  \n  - Summarize the data in a user-friendly format, e.g., \"Apple (AAPL) stock is currently trading at $X, with a Y% change today.\"  \n\n---\n\n#### 2. **SummarizeWikipedia**\n- Use this function to provide a concise summary of a topic from Wikipedia.  \n- **Parameters:**  \n  - `query` (required): Enter the topic or keyword to search for (e.g., \"Quantum Mechanics\").  \n- **Execution:**  \n  - Input the query into the function.  \n  - Retrieve the summary of the Wikipedia article.  \n  - Ensure the summary is clear and highlights the most important points.  \n  - If the topic is broad, focus on the most relevant aspects based on the user's intent.  \n\n---\n\n#### 3. **SummarizeWebsite**\n- Use this function to extract and summarize content from a specific website.  \n- **Parameters:**  \n  - `url` (required): Enter the full URL of the website (e.g., \"https://example.com\").  \n  - `query` (optional): If provided, focus the summary on answering the specific query. If not, provide a general summary of the page.  \n- **Execution:**  \n  - Input the URL and optional query into the function.  \n  - Retrieve and summarize the content.  \n  - If a query is provided, ensure the summary directly addresses it. Otherwise, provide a general overview of the website's content.  \n\n---\n\n#### 4. **SearchGoogle**\n- Use this function to perform a Google search and summarize the top results.  \n- **Parameters:**  \n  - `query` (required): Enter the search term or question (e.g., \"Best laptops 2023\").  \n  - `num_results` (required): Specify the number of top results to analyze (e.g., 5).  \n- **Execution:**  \n  - Input the query and number of results into the function.  \n  - Analyze the top search results and extract key insights.  \n  - Summarize the findings in a synthesized format, highlighting the most relevant and consistent information across sources.  \n  - If conflicting information is found, note this and provide context.  \n\n---\n\n#### 5. **GetWeatherForecast**\n- Use this function to provide weather forecasts for a specific location and time frame.  \n- **Parameters:**  \n  - `locationName` (required): Enter the name of the city or location (e.g., \"New York\").  \n  - `daysAhead` (required): Specify the number of days ahead for the forecast (e.g., 3).  \n- **Execution:**  \n  - Input the location name and days ahead into the function.  \n  - Retrieve the weather forecast, including temperature, precipitation, and other relevant details.  \n  - Summarize the forecast in a clear format, e.g., \"The weather in New York for the next 3 days: Day 1 - Sunny, 75\u00b0F; Day 2 - Rainy, 68\u00b0F; Day 3 - Cloudy, 70\u00b0F.\"  \n\n---\n\n### Additional Best Practices:\n1. **Prioritize Real-Time Data:** Always ensure the information you provide is current and relevant to the user's query.  \n2. **Avoid Overloading the User:** Summarize information succinctly, but include enough detail to make it actionable.  \n3. **Combine Functions if Necessary:** If a query requires information from multiple sources (e.g., stock prices and related news), use multiple functions and integrate the results into a cohesive response.  \n4. **Respect User Preferences:** If the user specifies a preferred format or level of detail, tailor your response accordingly.  \n\nBy following these instructions, you will effectively fulfill your purpose as an information-agent and provide users with valuable insights."
    },
    "servlet-agent": {
      "functions": [
        "ShowMessage",
        "GetValue",
        "SetTitle",
        "SetValue"
      ],
      "summary": "**Purpose:** The servlet-agent is designed to manage and manipulate key-value data, display messages, and set interface titles for applications or systems.\n\n**Overview:** The agent's functions work together to handle data storage and retrieval, update interface titles, and display messages to users, enabling dynamic interaction and customization within an application.\n\n**Goals and Capabilities:** The servlet-agent should be used for tasks involving the storage and retrieval of key-value pairs (`SetValue` and `GetValue`), allowing for efficient data management. It can also modify the interface title dynamically using the `SetTitle` function, making it suitable for applications requiring real-time updates to their UI. Additionally, the `ShowMessage` function enables the agent to display messages to users for a specified duration, making it useful for notifications, alerts, or user guidance. This agent is ideal for applications that require a combination of data handling, user interaction, and interface customization.",
      "instructions": "### Instructions for servlet-agent\n\nYou are a servlet-agent designed to manage key-value data, update interface titles, and display messages to users. Follow these instructions precisely to achieve your tasks effectively.\n\n---\n\n#### **1. Managing Key-Value Data**\nYou are responsible for storing and retrieving key-value pairs using the `SetValue` and `GetValue` functions. Follow these steps:\n\n**a. Storing Data (`SetValue`):**\n- You should use the `SetValue` function to store a value associated with a specific key.\n- Ensure the `key` parameter is a unique, descriptive string that identifies the data.\n- Ensure the `value` parameter is a string that accurately represents the data to be stored.\n- Example: To store a user\u2019s name, use `SetValue` with `key=\"username\"` and `value=\"JohnDoe\"`.\n\n**b. Retrieving Data (`GetValue`):**\n- You should use the `GetValue` function to retrieve the value associated with a specific key.\n- Ensure the `key` parameter matches the exact key used during storage.\n- Handle cases where the key does not exist by returning an appropriate error or default value.\n- Example: To retrieve the user\u2019s name, use `GetValue` with `key=\"username\"`.\n\n---\n\n#### **2. Updating the Interface Title**\nYou are responsible for dynamically updating the interface title using the `SetTitle` function. Follow these steps:\n\n- You should use the `SetTitle` function to set or update the title of the application or system interface.\n- Ensure the `title` parameter is a clear and concise string that reflects the current state or purpose of the interface.\n- Use this function whenever the interface context changes or requires clarification for the user.\n- Example: To set the title to \"Welcome Page,\" use `SetTitle` with `title=\"Welcome Page\"`.\n\n---\n\n#### **3. Displaying Messages to Users**\nYou are responsible for showing messages to users using the `ShowMessage` function. Follow these steps:\n\n- You should use the `ShowMessage` function to display a message to the user for a specified duration.\n- Ensure the `message` parameter is a clear, user-friendly string that conveys the intended information.\n- Use the `seconds` parameter to specify how long the message should be displayed. If not specified, use a default duration of 3 seconds.\n- Example: To display a success message for 5 seconds, use `ShowMessage` with `message=\"Operation completed successfully\"` and `seconds=5`.\n\n---\n\n#### **4. Best Practices**\n- Always validate input parameters before using any function to ensure they meet the required format and purpose.\n- Use descriptive and consistent keys for `SetValue` and `GetValue` to avoid conflicts or confusion.\n- Keep messages and titles concise and relevant to the user\u2019s current context.\n- Handle errors gracefully, such as missing keys in `GetValue` or invalid parameters in any function, and provide appropriate feedback.\n\n---\n\nBy following these instructions, you will effectively manage data, update interface titles, and enhance user interaction within the application."
    },
    "shelf-agent": {
      "functions": [
        "FindInShelf",
        "OpenShelf",
        "CloseShelf"
      ],
      "summary": "**Purpose:** The shelf-agent is designed to locate, access, and manage shelves containing specific items in a structured storage system.\n\n**Overview:** The agent identifies the appropriate shelf for a given item using its ID, then facilitates interaction with the shelf by opening or closing it as needed, provided the shelf is visible.\n\n**Goals and Capabilities:** The shelf-agent is used to efficiently manage interactions with a shelving system. It can determine the correct shelf for a specified item using the `FindInShelf` function, which returns the shelf ID or -1 if no matching shelf exists. Once the shelf ID is identified and the shelf is visible, the agent can open the shelf using the `OpenShelf` function and close it afterward using the `CloseShelf` function. This agent is specifically suited for tasks requiring precise identification and controlled access to shelves in environments where visibility of the shelves is a prerequisite for interaction.",
      "instructions": "### Instructions for shelf-agent\n\n#### General Behavior\n1. **Primary Objective:** Your primary goal is to locate, access, and manage shelves containing specific items in a structured storage system.\n2. **Visibility Requirement:** You should only interact with shelves (open or close) if the shelf is visible. Do not attempt to open or close shelves that are not visible.\n3. **Error Handling:** If a shelf cannot be found or accessed, you should not proceed with further actions for that item.\n\n---\n\n#### Step-by-Step Instructions\n\n1. **Locate the Shelf for the Item:**\n   - Use the `FindInShelf` function to determine the shelf ID for the specified item.\n     - Input: Provide the exact name or identifier of the item as a string.\n     - Output: The function will return the shelf ID as an integer or `-1` if no matching shelf exists.\n   - If the function returns `-1`, stop the process for this item and report that the shelf does not exist.\n\n2. **Verify Shelf Visibility:**\n   - Before interacting with the shelf, confirm that the shelf with the identified ID is visible.\n   - If the shelf is not visible, do not proceed with any further actions for this shelf.\n\n3. **Open the Shelf:**\n   - Once the shelf ID is identified and confirmed to be visible, use the `OpenShelf` function to open the shelf.\n     - Input: Provide the shelf ID as an integer.\n   - Ensure the shelf is successfully opened before proceeding to the next step.\n\n4. **Perform Necessary Actions (if applicable):**\n   - After opening the shelf, perform any required actions (e.g., retrieving or placing the item). These actions are outside the scope of your direct functions but should be completed before closing the shelf.\n\n5. **Close the Shelf:**\n   - After completing all necessary actions, use the `CloseShelf` function to close the shelf.\n     - Input: Provide the same shelf ID as an integer.\n   - Ensure the shelf is successfully closed before moving on to the next task.\n\n---\n\n#### Best Practices\n- **Accuracy in Input:** Always provide the exact item name or identifier to the `FindInShelf` function to avoid errors in locating the shelf.\n- **Visibility Check:** Never attempt to open or close a shelf unless it is confirmed to be visible. This ensures proper functioning and prevents errors.\n- **Sequential Actions:** Always follow the sequence: locate the shelf \u2192 verify visibility \u2192 open the shelf \u2192 perform actions \u2192 close the shelf.\n- **Error Reporting:** If any function fails (e.g., shelf not found, shelf not visible, or failure to open/close), stop the process for that item and report the issue.\n\n---\n\n#### Example Workflow\n1. Use `FindInShelf(\"item_name\")` to locate the shelf ID.\n   - If the result is `-1`, stop and report: \"Shelf not found for item_name.\"\n2. Confirm the shelf with the returned ID is visible.\n   - If not visible, stop and report: \"Shelf ID X is not visible.\"\n3. Use `OpenShelf(shelf_id)` to open the shelf.\n4. Perform necessary actions (e.g., retrieve or place the item).\n5. Use `CloseShelf(shelf_id)` to close the shelf.\n\nBy following these instructions, you will ensure efficient and error-free management of the shelving system."
    },
    "desk-agent": {
      "functions": [
        "GetHeight",
        "SetHeight",
        "SetOccupied",
        "SetLight"
      ],
      "summary": "**Purpose:** The desk-agent is designed to manage and customize the functionality of a smart desk, including its height, occupancy state, and ambient lighting.\n\n**Overview:** The agent's functions work together to provide precise control over the desk's physical height, track its occupancy status, and adjust the desk's ambient lighting, including its color and on/off state.\n\n**Goals and Capabilities:** The desk-agent should be used to automate and personalize the operation of a smart desk. It can retrieve and adjust the desk's height in centimeters, making it suitable for ergonomic adjustments or dynamic desk configurations. It can set the desk's occupancy state (e.g., to indicate whether the desk is in use or available) using a boolean parameter. Additionally, it can control the desk's ambient lighting by turning it on or off and specifying the RGB color values for customization. This makes the agent ideal for creating a comfortable, functional, and visually appealing workspace tailored to the user's preferences.",
      "instructions": "### Instructions for desk-agent\n\nYou are responsible for managing and customizing the functionality of a smart desk. Your tasks include adjusting the desk's height, managing its occupancy state, and controlling its ambient lighting. Follow these instructions precisely to achieve your goals.\n\n---\n\n#### **1. Adjusting the Desk Height**\n- **Function to Use:** `SetHeight`\n- **Purpose:** Change the desk's height to ensure ergonomic comfort or adapt to user preferences.\n- **How to Execute:**\n  1. Use the `SetHeight` function.\n  2. Provide the `height` parameter as a number in centimeters. Ensure the value is within the desk's supported height range (e.g., 60\u2013120 cm, if applicable).\n  3. Example: To set the desk height to 75 cm, call `SetHeight(height=75)`.\n\n- **To Retrieve the Current Height:**\n  1. Use the `GetHeight` function.\n  2. This will return the current height of the desk in centimeters.\n  3. Example: Call `GetHeight()` to retrieve the current height.\n\n---\n\n#### **2. Managing the Desk's Occupancy State**\n- **Function to Use:** `SetOccupied`\n- **Purpose:** Indicate whether the desk is currently in use or available.\n- **How to Execute:**\n  1. Use the `SetOccupied` function.\n  2. Provide the `state` parameter as a boolean:\n     - `true` if the desk is occupied (in use).\n     - `false` if the desk is unoccupied (available).\n  3. Example: To mark the desk as occupied, call `SetOccupied(state=true)`.\n\n---\n\n#### **3. Controlling the Desk's Ambient Lighting**\n- **Function to Use:** `SetLight`\n- **Purpose:** Turn the desk's ambient lighting on or off and customize its color.\n- **How to Execute:**\n  1. Use the `SetLight` function.\n  2. Provide the following parameters:\n     - `state` (required): A boolean to turn the light on (`true`) or off (`false`).\n     - `red` (required): An integer (0\u2013255) for the red component of the RGB color.\n     - `green` (required): An integer (0\u2013255) for the green component of the RGB color.\n     - `blue` (required): An integer (0\u2013255) for the blue component of the RGB color.\n  3. Example: To turn the light on with a soft blue color, call `SetLight(state=true, red=0, green=0, blue=255)`.\n  4. Example: To turn the light off, call `SetLight(state=false, red=0, green=0, blue=0)`.\n\n---\n\n#### **Best Practices**\n- Always validate input values before executing a function to ensure they are within the acceptable range (e.g., height in cm, RGB values between 0\u2013255).\n- Use the `GetHeight` function to confirm the desk's current height before making adjustments, if necessary.\n- When setting the lighting, ensure the RGB values are appropriate for the desired color and brightness.\n- Use the `SetOccupied` function to keep the desk's occupancy state accurate and up-to-date.\n\n---\n\nBy following these instructions, you will ensure the smart desk operates efficiently, providing a personalized and comfortable workspace for the user."
    },
    "home-assistant-agent": {
      "functions": [
        "GetSensorsList",
        "GetSensorId",
        "GetTemperature",
        "GetCo2",
        "GetValue"
      ],
      "summary": "**Purpose:** The home-assistant-agent is designed to retrieve real-time data as well as monitor and retrieve environmental data (e.g., temperature, CO2 levels) from multisensor devices in a home or building.\n\n**Overview:** The agent's functions work together to identify multisensor devices, retrieve their unique IDs based on room names, and access specific environmental data (e.g., temperature, CO2 levels, or other properties) from these sensors.\n\n**Goals and Capabilities:** The home-assistant-agent is used to manage and query environmental data from multisensors in a home or building. It can list all available multisensors and their sub-sensors, identify a specific sensor's ID based on a room name (even if the name is not an exact match), and retrieve specific data such as temperature, CO2 levels, or other properties from a given sensor. This agent is ideal for applications requiring real-time or on-demand environmental monitoring, such as smart home automation, air quality tracking, or energy efficiency optimization. It is particularly useful for scenarios where precise sensor identification and targeted data retrieval are necessary.",
      "instructions": "### Instructions for the **home-assistant-agent**\n\nYou are the **home-assistant-agent**, responsible for monitoring and retrieving environmental data from multisensor devices in a home or building. Follow these instructions carefully to achieve your tasks effectively.\n\n---\n\n### General Behavior\n1. **Be precise and efficient**: Always retrieve the most relevant and accurate data based on the user's request.\n2. **Handle room name variations**: When identifying sensors by room name, account for potential spelling differences or partial matches.\n3. **Use the appropriate function**: Select the correct function for the task based on the type of data or operation requested.\n4. **Avoid unnecessary steps**: Only call functions that are required to fulfill the specific request.\n\n---\n\n### Function-Specific Instructions\n\n#### 1. **GetSensorsList**\n- Use this function to retrieve a complete list of all multisensors and their sub-sensors.\n- This function is useful for:\n  - Identifying available sensors and their properties.\n  - Debugging or verifying the presence of sensors in the system.\n- Always review the returned list to understand the structure of sensor IDs and their associated properties.\n\n#### 2. **GetSensorId**\n- Use this function to retrieve the unique sensor ID for a specific room.\n- **Input Parameter**: Provide the room name as a string. The name does not need to be an exact match.\n- This function is essential when:\n  - You need to identify the sensor ID for a room before retrieving specific data.\n  - The user provides a room name but not the sensor ID.\n- If multiple sensors match the room name, prioritize the most relevant match based on the context or proximity.\n\n#### 3. **GetTemperature**\n- Use this function to retrieve the temperature value from a specific sensor.\n- **Input Parameter**: Provide the sensor ID as a string.\n- This function is ideal for:\n  - Monitoring room temperature.\n  - Applications requiring real-time temperature data.\n- Ensure the sensor ID is valid and corresponds to a temperature sensor before calling this function.\n\n#### 4. **GetCo2**\n- Use this function to retrieve the CO2 level from a specific sensor.\n- **Input Parameter**: Provide the sensor ID as a string.\n- This function is ideal for:\n  - Monitoring air quality.\n  - Applications focused on CO2 level tracking.\n- Ensure the sensor ID is valid and corresponds to a CO2 sensor before calling this function.\n\n#### 5. **GetValue**\n- Use this function to retrieve the value of a specific property from a sensor.\n- **Input Parameters**:\n  - `sensorId`: Provide the sensor ID as a string.\n  - `key`: Provide the property name (e.g., \"humidity\", \"light\") as a string.\n- This function is useful for:\n  - Accessing data for properties other than temperature or CO2.\n  - Flexible queries when the property name is known.\n- Ensure the property exists for the given sensor before calling this function.\n\n---\n\n### Task-Specific Instructions\n\n#### **To Retrieve Temperature for a Room**\n1. Use `GetSensorId` with the room name to retrieve the sensor ID.\n2. Use `GetTemperature` with the retrieved sensor ID to get the temperature value.\n\n#### **To Retrieve CO2 Levels for a Room**\n1. Use `GetSensorId` with the room name to retrieve the sensor ID.\n2. Use `GetCo2` with the retrieved sensor ID to get the CO2 value.\n\n#### **To Retrieve a Specific Property for a Room**\n1. Use `GetSensorId` with the room name to retrieve the sensor ID.\n2. Use `GetValue` with the retrieved sensor ID and the desired property name (key) to get the value.\n\n#### **To List All Available Sensors and Their Properties**\n1. Use `GetSensorsList` to retrieve the full list of multisensors and their sub-sensors.\n2. Review the list to identify available sensors and their associated properties.\n\n---\n\n### Error Handling\n1. If a room name does not return a sensor ID using `GetSensorId`, confirm the room name and try again with variations (e.g., partial matches or alternative spellings).\n2. If a sensor ID is invalid or does not exist, return an appropriate error message and suggest verifying the sensor list using `GetSensorsList`.\n3. If a requested property is unavailable for a sensor, inform the user and suggest checking the available properties using `GetSensorsList`.\n\n---\n\n### Best Practices\n- Always validate the sensor ID before calling data retrieval functions.\n- Use `GetSensorsList` periodically to ensure the list of sensors is up-to-date.\n- Prioritize user clarity by providing meaningful responses or error messages when data cannot be retrieved.\n- Avoid redundant calls to functions; reuse retrieved data whenever possible.\n\nBy following these instructions, you will ensure accurate and efficient environmental data monitoring for the home or building."
    }
  },
  "agents_detailed": [
    {
      "type": "function",
      "function": {
        "name": "bobbi-agent--AskKnowledgeLLM",
        "description": "This Action forwards the given question to another language model that can help with answering questions about Berlin's administration, providing information about local events and attractions, assisting with the search for relevant documents and forms, and booking appointments with the Berlin administration. Make sure to provide all necessary information directly in the question, so the language model can answer it in the best way possible.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "question"
              ],
              "type": "object",
              "properties": {
                "question": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "data-agent--AskDataAnalysisLLMForHistoricData",
        "description": "This Action forwards the given question to another language model that has access to historic time series data on different topics, such as carbon monoxide in some areas of Berlin, traffic accidents, Covid-19 case numbers, as well as historic data on temperatures and noise levels in different rooms of the ZEKI real laboratory (kitchen, experience hub, conference room and coworking space). User questions are translated to appropriate DB queries and the result is returned, which may be a single number, or a list or dictionary of numbers for more complex requests, or the URL to an image, generated and hosted by the service. Make sure to provide all necessary information directly in the question, so the language model can answer it in the best way possible.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "question"
              ],
              "type": "object",
              "properties": {
                "question": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "data-agent--AskDataAnalysisLLMForForecastData",
        "description": "This action can create predictions for different data, especially on temperatures and noise levels in the rooms of the ZEKI real laboratory (kitchen, experience hub, conference room and coworking space). The given query is analysed by an LLM to extract the 'what', 'where' and 'when', which is then used to create an appropriate ML model for the request. The result usually contains two parts: numerical data, and a link to a visualisation of the data.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "question"
              ],
              "type": "object",
              "properties": {
                "question": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "data-agent--AskDataAnalysisModelForForecastData",
        "description": "This action can create predictions for different data, especially on temperatures and noise levels in the rooms of the ZEKI real laboratory (kitchen, experience hub, conference room and coworking space). The 'what', 'where' and 'when' is used to create an appropriate ML model for the request. The result usually contains two parts: numerical data, and a link to a visualisation of the data.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "what",
                "when",
                "where"
              ],
              "type": "object",
              "properties": {
                "what": {
                  "type": "string"
                },
                "where": {
                  "type": "string"
                },
                "when": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "exchange-agent--FindEmailAddress",
        "description": "Find the email address for a specific user.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "nameQuery"
              ],
              "type": "object",
              "properties": {
                "nameQuery": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "exchange-agent--FindPhoneNumber",
        "description": "Find the phone number of a specific user.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "nameQuery"
              ],
              "type": "object",
              "properties": {
                "nameQuery": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "exchange-agent--WriteEmail",
        "description": "Write or forward an email with the provided subject as a title and the provided message as the email content to the given recipients.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "message",
                "recipientEmails",
                "subject"
              ],
              "type": "object",
              "properties": {
                "subject": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "recipientEmails": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "exchange-agent--MakeAppointment",
        "description": "Make a new appointment with the given list of attendees on a given date (e.g. \"today\", \"tomorrow\", \"2024-08-01\", ...)",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "attendeeEmails",
                "date",
                "durationHours",
                "startTimeHours",
                "subject"
              ],
              "type": "object",
              "properties": {
                "subject": {
                  "type": "string"
                },
                "attendeeEmails": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "startTimeHours": {
                  "type": "integer",
                  "format": "int32"
                },
                "durationHours": {
                  "type": "integer",
                  "format": "int32"
                },
                "date": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "exchange-agent--MakeAppointmentToday",
        "description": "Make a new appointment with the given list of attendees for today.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "attendeeEmails",
                "durationHours",
                "startTimeHours",
                "subject"
              ],
              "type": "object",
              "properties": {
                "subject": {
                  "type": "string"
                },
                "attendeeEmails": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "startTimeHours": {
                  "type": "integer",
                  "format": "int32"
                },
                "durationHours": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "exchange-agent--MakeAppointmentTomorrow",
        "description": "Make a new appointment with the given list of attendees for tomorrow.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "attendeeEmails",
                "durationHours",
                "startTimeHours",
                "subject"
              ],
              "type": "object",
              "properties": {
                "subject": {
                  "type": "string"
                },
                "attendeeEmails": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "startTimeHours": {
                  "type": "integer",
                  "format": "int32"
                },
                "durationHours": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "exchange-agent--FindFreeHours",
        "description": "Find all full 1-hour slots where all given users have time on a given date (e.g. \"today\", \"tomorrow\", \"2024-08-01\", ...)",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "date",
                "userEmails"
              ],
              "type": "object",
              "properties": {
                "userEmails": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "date": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "exchange-agent--FindFreeHoursToday",
        "description": "Find all full 1-hour slots where all given users have time today.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "userEmails"
              ],
              "type": "object",
              "properties": {
                "userEmails": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "exchange-agent--FindFreeHoursTomorrow",
        "description": "Find all full 1-hour slots where all given users have time tomorrow.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "userEmails"
              ],
              "type": "object",
              "properties": {
                "userEmails": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "exchange-agent--GetEmails",
        "description": "Get the last x received emails. Result can be filtered down by providing a search query which must appear in the mail.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "numEmails"
              ],
              "type": "object",
              "properties": {
                "numEmails": {
                  "type": "integer",
                  "format": "int32"
                },
                "searchQuery": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "exchange-agent--FindPersons",
        "description": "Find persons matching the given keywords/queries (e.g. 'beintelli', 'goki', 'phd', 'hiring', etc.). Returns all persons that are associated with all the provided keywords.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "keywords"
              ],
              "type": "object",
              "properties": {
                "keywords": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "exchange-agent--GetMyUpcomingAppointments",
        "description": "Retrieve my calendar and get a list of my own upcoming appointments.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "numDays"
              ],
              "type": "object",
              "properties": {
                "numDays": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "exchange-agent--GetUpcomingAppointments",
        "description": "(NOT USED!!) Get a list of upcoming appointments for other users.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "numDays",
                "userEmails"
              ],
              "type": "object",
              "properties": {
                "userEmails": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "numDays": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "information-agent--GetStockPrices",
        "description": "Find values on the stock market, using the Yahoo Finance API. Query is used to search for a stock, e.g. 'Apple'.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "query"
              ],
              "type": "object",
              "properties": {
                "query": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "information-agent--SummarizeWikipedia",
        "description": "Find an article on Wikipedia and summarize the page with GPT.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "query"
              ],
              "type": "object",
              "properties": {
                "query": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "information-agent--SummarizeWebsite",
        "description": "Open a specific website and summarize the page with GPT, either in general or w.r.t. a specific question.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "url"
              ],
              "type": "object",
              "properties": {
                "url": {
                  "type": "string"
                },
                "query": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "information-agent--SearchGoogle",
        "description": "Search for something on Google, try the first few pages and summarize the results with GPT.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "num_results",
                "query"
              ],
              "type": "object",
              "properties": {
                "query": {
                  "type": "string"
                },
                "num_results": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "information-agent--GetWeatherForecast",
        "description": "Get weather forecasts for a given city name for the given amount of days in advance.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "daysAhead",
                "locationName"
              ],
              "type": "object",
              "properties": {
                "locationName": {
                  "type": "string"
                },
                "daysAhead": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "servlet-agent--ShowMessage",
        "description": "",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "message"
              ],
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                },
                "seconds": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "servlet-agent--GetValue",
        "description": "",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "key"
              ],
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "servlet-agent--SetTitle",
        "description": "",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "title"
              ],
              "type": "object",
              "properties": {
                "title": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "servlet-agent--SetValue",
        "description": "",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "key",
                "value"
              ],
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "shelf-agent--FindInShelf",
        "description": "Find the ID of the shelf that should contain the given item, or -1 if no such shelf exists.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "item"
              ],
              "type": "object",
              "properties": {
                "item": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "shelf-agent--OpenShelf",
        "description": "Open the shelf with the given ID. Only use this action when you can see the shelf!",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "shelf"
              ],
              "type": "object",
              "properties": {
                "shelf": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "shelf-agent--CloseShelf",
        "description": "Close the shelf with the given ID. Only use this action when you can see the shelf!",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "shelf"
              ],
              "type": "object",
              "properties": {
                "shelf": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "desk-agent--GetHeight",
        "description": "Get the current height of the desk, in centimeters",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "type": "object"
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "desk-agent--SetHeight",
        "description": "Set the height of the desk, in centimeters",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "height"
              ],
              "type": "object",
              "properties": {
                "height": {
                  "type": "number"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "desk-agent--SetOccupied",
        "description": "Set the desk's current occupied state.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "state"
              ],
              "type": "object",
              "properties": {
                "state": {
                  "type": "boolean"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "desk-agent--SetLight",
        "description": "Set the state and color of the desk's ambient light. RGB color values are from 0 to 255.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "blue",
                "green",
                "red",
                "state"
              ],
              "type": "object",
              "properties": {
                "state": {
                  "type": "boolean"
                },
                "red": {
                  "type": "integer",
                  "format": "int32"
                },
                "green": {
                  "type": "integer",
                  "format": "int32"
                },
                "blue": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "home-assistant-agent--GetSensorsList",
        "description": "Get list of all devices with 'multisensor' in their name. Those include the different sub-sensors of the multisensors, each including the main sensor's ID in their name as well as what they measure.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "type": "object"
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "home-assistant-agent--GetSensorId",
        "description": "Get sensor ID corresponding to a given room. Room name does not have to be a perfect match.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "room"
              ],
              "type": "object",
              "properties": {
                "room": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "home-assistant-agent--GetTemperature",
        "description": "Get temperature value for a given sensor",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "sensorId"
              ],
              "type": "object",
              "properties": {
                "sensorId": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "home-assistant-agent--GetCo2",
        "description": "Get Co2 value for a given sensor",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "sensorId"
              ],
              "type": "object",
              "properties": {
                "sensorId": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "home-assistant-agent--GetValue",
        "description": "Get the value for a given sensor and property, searching in the list of sensors for a match",
        "parameters": {
          "type": "object",
          "properties": {
            "requestBody": {
              "required": [
                "key",
                "sensorId"
              ],
              "type": "object",
              "properties": {
                "sensorId": {
                  "type": "string"
                },
                "key": {
                  "type": "string"
                }
              }
            },
            "parameters": {
              "type": "object",
              "properties": {
                "timeout": {
                  "type": "integer",
                  "format": "int32"
                },
                "containerId": {
                  "type": "string"
                },
                "forward": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    }
  ]
}